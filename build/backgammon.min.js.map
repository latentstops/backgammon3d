{"version":3,"sources":["stats.js","backgammon-3d-board.js","position-map-generator.js","checker-manager.js","dice.js","dice-manager.js","double-cube-manager.js","movement-manager.js","platform-detector.js","board-loader.js","picker.js","double-cube-picker.js","checker-picker.js","text-writer.js","game-helper.js","optimization-manager.js","manager.js","module-exporter.js"],"names":["Stats","beginTime","now","prevTime","frames","functions","begin","end","time","interval","this","fps","Math","round","forEach","funcObject","func","scope","call","update","Backgammon3DBoard","BackgammonBoard","PositionMapGenerator","init","apply","arguments","prototype","initProperties","horizontalStep","verticalStep","verticalStepOut","positionMap","positionMapIterator","positions","points","dot","scene","initPoints","initPositions","initDot","THREE","Mesh","SphereGeometry","MeshLambertMaterial","wireframe","Object3D","name","rightDownOut","Vector3","rightDown","leftDown","leftUp","rightUp","rightUpOut","leftDownOut","leftUpOut","hitUp","hitDown","fillBoard","fillRightDownOut","fillRightDown","fillLeftDown","fillLeftUp","fillRightUp","fillRightUpOut","fillHitDown","fillHitUp","fillLeftDownOut","fillLeftUpOut","rightDownPosition","verticalCheckersCount","horizontalCheckersCount","params","startPosition","fill","rightDownOutPosition","leftDownPosition","leftUpPosition","rightUpPosition","hitDownPosition","addToMap","index","position","map","self","push","baseDot","cloneDot","clone","copy","i","j","abs","x","z","y","CheckerManager","manager","isMirrored","checker","getObjectByName","config","modelsPath","scaleFactor","materialMap","mirrorState","isColorSwitched","checkerGeometryHigh","geometry","initPositionMap","initMaterialMap","initCheckerPicker","beautifyChecker","pointTHREE","add","positionMapGenerator","slice","mirrorPositionMap","state","isAnimated","undefined","first","shift","down","splice","up","reverse","unshift","pMap0","pMap25","recalculatePositions","textWriter","updatePositions","colorsMap","white","black","blackMaterial","MeshPhongMaterial","color","shininess","whiteMaterial","checkerPicker","CheckerPicker","rotateX","PI","material","bumpScale","combine","MixOperation","visible","castShadow","receiveShadow","children","point","movementManager","animateCheckerMove","updateCheckersCounts","setCheckersInPoint","_point","_collection","length","baseChecker","cloneChecker","readOnly","checkerType","rotation","setReadOnly","isReadOnly","readOnlyPoints","filter","child","setPlaceOfOut","type","place","setPlaceOfOutForNormalMode","switchCheckersColors","colorSwitched","Color","traverse","fillBoardFromMap","Dice","diceType","dump","dumpedAnimation","three","texturesMap","DICE_TEXTURES_PATH","getTexture","texture","ImageUtils","loadTexture","texturesPath","1","2","3","4","5","6","red","currentTextureMap","setStartPosition","drop","num","parseInt","drop1","drop2","drop3","drop4","drop5","drop6","dropX","animation","result","setNumber1","setNumber2","setNumber3","setNumber4","setNumber5","setNumber6","setNumber","isNaN","faceConfigMap","indexOf","currentFaceMap","setCurrentTextureMap","colorMap","0","setDumpedAnimation","playDumpAnimation","rollType","dumpPosition","dumpRotation","positionVec3","rotationVec3","magicNumber","multiplyScalar","DiceManager","managerscene","callback","dices","animations","ANIMATION_FILE_ARRAY","audio","diceGeometry","animationIndex","ANIMATIONS_PATH","isColorsSwitched","thisParams","mass","diceParams","isAnimationFromRight","animationsPath","initDiceGeometry","initAnimations","createDice","createTHREE","createDices","mesh","addToScene","remove","createDiceFromGeometry","scaleIndex","computeVertexNormals","diceMaterial","MultiplyOperation","dice","scale","set","_params","delta","dice1","dice2","startAnimationHandler","stopAnimation","playAnimation","num1","num2","lastRoll","projectionObject","renderOrder","setDiceColorsFromRollType","playSound","getDice1","getDice2","checkerManager","switchDiceColors","c1","c2","setDiceState","diceNum","stateMap","getDice","transparent","opacity","DoubleCubeManager","initResetParams","initCube","initMovementManager","initDoubleCubePicker","checkDoubleCubeState","cube","resetParams","double_cube","diceName","minFilter","LinearMipMapLinearFilter","anisotropy","renderer","getMaxAnisotropy","s","currentNumber","exists","reset","defaultRotation","Euler","MovementManager","doubleCubePicker","DoubleCubePicker","positionCenter","positionUp","positionDown","positionLeft","positionRight","reversePositionMap","center","ud","lr","isRotating","boardRotationState","rotationMap","64","8","16","32","currentMap","rotateDoubleCube","setDoubleCube","value","move","to","isDoubleCubeExist","boardDegreeState","toPosition","from","isMoving","t1","t2","TWEEN","Tween","easing","Easing","Exponential","Out","start","mouseMove","onUpdate","angle","sin","onComplete","rotateBoard","isCameraRotating","camera","cameraStartY","lookAtVector","cameraControls","target","basePosition","cameraR","rotateDoubleCubeWithCamera","rotateCheckerNumbersWithCamera","animate","lookAt","cos","setBoardDegreeState","cameraBasePosition","degree","zoom","configZoom","updateProjectionMatrix","anim1","anim2","onStart","doubleCubeManager","moveDoubleCubeUpDown","doubleCube","moveUpVector","moveDownVector","animateDoubleCubeMove","checkerNumbers","PlatformDetector","domContainer","eventSource","detect","initRenderer","initCanvas","connectEvents","isWeb","isMobile","canvas","mouseDowns","mouseUps","mouseMoves","HTMLDivElement","e","mobileCheck","check","a","test","substr","navigator","userAgent","vendor","window","opera","console","log","setCoordsFromMobileEvent","event","touch","touches","layerX","clientX","layerY","clientY","initRendererForWeb","initRendererForQT","WIDTH","clientWidth","HEIGHT","clientHeight","WebGLRenderer","antialias","alpha","shadowMap","enabled","soft","setSize","domElement","oncontextmenu","appendChild","Canvas3DRenderer","devicePixelRatio","width","height","shadowMapEnabled","shadowMapSoft","addMouseDownFunction","mouseDownFunction","addMouseMoveFunction","mouseMoveFunction","addMouseUpFunction","mouseUpFunction","connectMouseDown","connectMouseMove","connectMouseUp","removeEvents","removeMouseEvents","removeResizeEvent","eventMap","mm","removeEventListener","resizeFunction","isMouseDownConnected","mouseDown","addEventListener","onmousedown","connect","isMouseMoveConnected","preventDefault","stopPropagation","onmousemove","isMouseUpConnected","mouseUp","onmouseup","connectResize","resize_GL","getCanvas","getRenderer","BoardLoader","loader","ObjectLoader","loadAll","loadBoard","boardScene","loadChecker","checkerScene","checkerName","loadDice","diceScene","loadDiceAnimations","xhrGet","url","success","error","loadingManager","LoadingManager","xhr","XHRLoader","load","boardPath","board","objectPath","setTexturePath","checkerPath","dicePath","loadPlane","planePath","plane","animationsFiles","animationsCount","_i","fileName","fullFileName","r","JSON","parse","Object","keys","path","Picker","mouse","Vector2","raycaster","Raycaster","selectableObjects","intersectProjection","intersectObject","clickStarted","Date","timeInterval","initParent","platformDetector","initProjectionObject","initEvents","addMouseDownEvent","addMouseMoveEvent","addMouseUpEvent","needRendering","createWebButton","mouseSet","setFromCamera","intersects","intersectObjects","mouseDownCallBack","onMouseMove","mouseMoveCallBack","onMouseUp","mouseUpCallBack","webButton","button","getPlaceInfoFromMesh","diff","info","_position","selX","selZ","xDiff","zDiff","_diff","sqrt","pow","constructor","selectedCube","intersect","object","placeInfo","doubleCubeMoved","moveObject","indexTo","positionTo","mapIndex","mouseMoveStarted","isMouseDown","create","lastMouseCoords","condition","isMouseInsideCircle","isCheckerMoveStarted","selectedChecker","buttons","mouseMoveStart","l","vibrate","o","gameHelper","turnLightOnFromMesh","allPossibleSteps","setTimeout","maxStep","minStep","resetEventsParams","turnOffAllLights","indexFrom","diceManager","moved","x1","x0","y1","y0","moveCollection","moveArray","isSame","getCheckerFromIndex","getPositionFromIndex","replaceChecker","animateMove","f","t","pointFrom","pointFromCheckers","pointTo","pointToCheckers","checkerIndex","last","arr","checkers","TextWriter","sprite","numbers","initObjects","pips1","pips2","pipsMap","MeshBasicMaterial","geometry1","getGeometryFromText","geometry2","mesh1","mesh2","objects","hidePips","setPipsVisibiliyState","showPips","getPips1","getPips2","getMeshFromGeometry","small","matMap","text","TextGeometry","size","curveSegments","font","checkersPositionMap","pointMap","number","pointChildrenCount","checkersCount","posVector","write","placeName","getPips","GameHelper","demo","initPoint","createPoints","sphere","lightColor","light1","points1","points2","basePoint","firstPositionInMap","currentPoint","currentPoint2","turnLightOnForIndex","changeLightState","turnLightOffForIndex","placeIndex","diceIndex1","diceIndex2","finalIndex1","finalIndex2","point1","point2","turnLightsOn","turnOnOff","rnd","random","OptimizationManager","priority","initConfig","checkersOptimizationDone","textureOptimizationDone","shadowsOptimizationDone","stats","initOptimizations","FPS_MIN","FPS_MAX","optimizations","isOptimized","optimizeShadows","optimizeCheckers","optimizeTextures","optimizeNext","manipulateOptimization","optimization","revertOptimizationNext","dLight2","shadowDarkness","doAction","checkerGeometry","checkerGeometryLow","checkerObjectPathLow","objectPathLow","checkerNameLow","nameLow","checkerHighGeometry","checkerLoadginStarted","checkerMesh","geometryLow","applyMatrix","Matrix4","makeRotationX","boardTexturesPath","boardImagePlane","PlaneGeometry","side","DoubleSide","shadowPlane","Manager","isInited","clock","objectPicker","onLoadComplete","animationFrameID","mainPath","initialConfig","rotationState","outPlaces","placeOfOut1","placeOfOut2","initStats","initDomContainer","initPlatformDetector","initOptimizationManager","initCamera","initLoader","clearColor","document","createElement","el","PerspectiveCamera","initScene","loadedScene","Scene","fullInit","initDiceManager","initLights","initCameraControls","beautifyScene","initCheckerManager","initDoubleCube","initTextWriter","applyInitialConfig","initGameHelper","initAPI","setRotationState","OrbitControls","optimizationManager","diceManagerParams","onresize","stopRendering","innerWidth","innerHeight","aspect","main","planeTexturesPath","textureLoader","LinearFilter","bumpMap","specular","hemisphereLight","HemisphereLight","intensity","light","DirectionalLight","shadowCameraNear","shadowCameraFar","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowBias","shadowMapHeight","shadowMapWidth","light2","then","requestAnimationFrame","destroy","clear","cancelAnimationFrame","data","handleId","diceManger","physics","render","setDoubleCubeReadOnly","setDegreeState","initPhysics","DAC","PhysicsManager","api","playCheckerSound","playDiceSound","playDoubleCubeSound","collection","switchColors","setMirroredState","moveDoubleCubeTo","changeDoubleCubeTo","roll","writePips","pips","setPips","setPipsVisibility","turnAllHintsOff","setHintForIndex","removeHintForIndex","setHintsForIndexes","index1OrArray","index2","exports","module"],"mappings":"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","file":"backgammon.min.js","sourcesContent":["var Stats = function () {\r\n\r\n\r\n\r\n    var beginTime = ( Date ).now(),\r\n        prevTime = beginTime,\r\n        frames = 0;\r\n\r\n    return {\r\n\r\n        functions:[],\r\n\r\n        begin: function () {\r\n\r\n            beginTime = ( Date ).now();\r\n\r\n        },\r\n\r\n        end: function () {\r\n\r\n            frames++;\r\n\r\n            var time = ( Date ).now();\r\n\r\n            var interval = this.interval;\r\n\r\n            if (time > prevTime + interval) {\r\n\r\n                this.fps = Math.round(( frames * 1000 ) / ( time - prevTime ));\r\n\r\n                prevTime = time;\r\n\r\n                this.functions.forEach(function (funcObject) {\r\n\r\n                    if(!funcObject) return;\r\n\r\n                    var func = funcObject.func;\r\n                    var scope = funcObject.scope;\r\n\r\n                    if(!func || !scope) return;\r\n\r\n                    func.call(scope);\r\n\r\n                });\r\n\r\n                frames = 0;\r\n\r\n            }\r\n\r\n            return time;\r\n\r\n        },\r\n\r\n        update: function () {\r\n\r\n            beginTime = this.end();\r\n\r\n        },\r\n\r\n        interval: 3000\r\n\r\n    };\r\n\r\n};\r\n","/*\r\n * API is inside of board_manager.api\r\n */\r\n\r\n/* Callbacks */\r\n//moved:                  function (from, to)\r\n//maxStep:                function (from)\r\n//minStep:                function (from)\r\n//allPossibleSteps:       function (from)\r\n\r\n/* Board */\r\n//setRotationState:       function (state, isAnimated)\r\n//setDegreeState:         function (state, isAnimated)\r\n\r\n/* Checkers */\r\n//setPlaceOfOut:          function (type, place)\r\n//setCheckersInPoint:     function (point, collection)\r\n//move:                   function (moveCollection, isAnimated)\r\n//setReadOnly :           function (checkerType, isReadOnly)\r\n//switchColors:           function (state)\r\n//setMirroredState:       function (state, isAnimated)\r\n\r\n/* Double Cube */\r\n//setDoubleCubeReadOnly:  function (state)\r\n//moveDoubleCubeTo:       function (index, isAnimated)\r\n//changeDoubleCubeTo:     function (place, number, isAnimated)\r\n//isDoubleCubeExist:      function (state)\r\n\r\n/* Dices */\r\n//roll :                  function(num1, num2, rollType, isAnimated)\r\n//setDiceState:           function(dice, state)\r\n\r\n/* PIPS */\r\n//setPipsVisibilityState  function(state)\r\n//showPips :              function()\r\n//hidePips:               function()\r\n//writePips:              function(pips, text) /* pips argument can be 0,1 OR 'pips1','pips2' */\r\n\r\nvar Backgammon3DBoard;\r\n\r\n(function(){\r\n\r\n    var BackgammonBoard = function(){};\r\n\r\n    Backgammon3DBoard = new BackgammonBoard();\r\n\r\n})();\r\n","(function(){\r\n\r\n    var PositionMapGenerator = function(){\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    PositionMapGenerator.prototype.initProperties = function() {\r\n\r\n        this.horizontalStep         = null;\r\n        this.verticalStep           = null;\r\n        this.verticalStepOut        = null;\r\n        this.positionMap            = null;\r\n        this.positionMapIterator    = null;\r\n        this.positions              = {};\r\n        this.points                 = null;\r\n        this.dot                    = null;\r\n\r\n    };\r\n\r\n    PositionMapGenerator.prototype.init = function(scene) {\r\n\r\n        this.initProperties();\r\n\r\n        this.scene = scene;\r\n\r\n        this.horizontalStep = 0.54;\r\n\r\n        this.verticalStep = 0.48;\r\n\r\n        this.verticalStepOut = 0.142;\r\n\r\n        this.positionMap = [];\r\n\r\n        this.positionMapIterator = 0;\r\n\r\n        this.initPoints();\r\n\r\n        this.initPositions();\r\n\r\n        this.initDot();\r\n\r\n    };\r\n\r\n    PositionMapGenerator.prototype.initDot  = function() {\r\n\r\n        this.dot = new THREE.Mesh(new THREE.SphereGeometry(0.01), new THREE.MeshLambertMaterial({wireframe: true}));\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.initPoints = function() {\r\n\r\n        this.points = new THREE.Object3D();\r\n        this.points.name = 'Points';\r\n\r\n    };\r\n\r\n\r\n\r\n    PositionMapGenerator.prototype.initPositions = function() {\r\n\r\n        this.positions = {\r\n\r\n            rightDownOut:   new THREE.Vector3(  4.04,   0.3 ,  2.57 ),\r\n\r\n            rightDown:      new THREE.Vector3(  3.3 ,   0.04,  2.55 ),\r\n            leftDown:       new THREE.Vector3( -0.6 ,   0.04,  2.55 ),\r\n            leftUp:         new THREE.Vector3( -3.3 ,   0.04, -2.55 ),\r\n            rightUp:        new THREE.Vector3(  0.6 ,   0.04, -2.55 ),\r\n\r\n            rightUpOut:     new THREE.Vector3(  4.04,   0.3 , -2.57 ),\r\n            leftDownOut:    new THREE.Vector3( -4.04,   0.3 ,  2.57 ),\r\n            leftUpOut:      new THREE.Vector3( -4.04,   0.3 , -2.57 ),\r\n\r\n            hitUp:          new THREE.Vector3(  0   ,   0.31, -1    ),\r\n            hitDown:        new THREE.Vector3(  0   ,   0.31,  1    )\r\n\r\n        };\r\n\r\n    };\r\n\r\n\r\n\r\n    PositionMapGenerator.prototype.fillBoard = function() {\r\n\r\n        this.fillRightDownOut();\r\n\r\n        this.fillRightDown();\r\n        this.fillLeftDown();\r\n        this.fillLeftUp();\r\n        this.fillRightUp();\r\n\r\n        this.fillRightUpOut();\r\n\r\n        this.fillHitDown();\r\n        this.fillHitUp();\r\n\r\n        this.fillLeftDownOut();\r\n        this.fillLeftUpOut();\r\n\r\n\r\n    };\r\n\r\n    PositionMapGenerator.prototype.fillRightDown = function() {\r\n\r\n        var rightDownPosition = this.positions.rightDown;\r\n        var horizontalStep = -this.horizontalStep;\r\n        var verticalStep = -this.verticalStep;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 6;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: rightDownPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fillRightDownOut = function() {\r\n\r\n        var rightDownOutPosition = this.positions.rightDownOut;\r\n        var horizontalStep = -this.horizontalStep;\r\n        var verticalStep = -this.verticalStepOut;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 1;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: rightDownOutPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fillLeftDown = function() {\r\n\r\n        var leftDownPosition = this.positions.leftDown;\r\n        var horizontalStep = -this.horizontalStep;\r\n        var verticalStep = -this.verticalStep;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 6;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: leftDownPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n    PositionMapGenerator.prototype.fillLeftDownOut = function() {\r\n\r\n        var leftDownPosition = this.positions.leftDownOut;\r\n        var horizontalStep = -this.horizontalStep;\r\n        var verticalStep = -this.verticalStepOut;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 1;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: leftDownPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fillLeftUp = function() {\r\n\r\n        var leftUpPosition = this.positions.leftUp;\r\n        var horizontalStep = this.horizontalStep;\r\n        var verticalStep = this.verticalStep;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 6;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: leftUpPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fillLeftUpOut = function() {\r\n\r\n        var leftUpPosition = this.positions.leftUpOut;\r\n        var horizontalStep = this.horizontalStep;\r\n        var verticalStep = this.verticalStepOut;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 1;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: leftUpPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fillRightUp = function() {\r\n\r\n        var rightUpPosition = this.positions.rightUp;\r\n        var horizontalStep = this.horizontalStep;\r\n        var verticalStep = this.verticalStep;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 6;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: rightUpPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fillRightUpOut = function() {\r\n\r\n        var rightUpPosition = this.positions.rightUpOut;\r\n        var horizontalStep = this.horizontalStep;\r\n        var verticalStep = this.verticalStepOut;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 1;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: rightUpPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fillHitUp = function() {\r\n\r\n        var hitDownPosition = this.positions.hitUp;\r\n        var horizontalStep = this.horizontalStep;\r\n        var verticalStep = this.verticalStep;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 1;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: hitDownPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fillHitDown = function() {\r\n\r\n        var hitDownPosition = this.positions.hitDown;\r\n        var horizontalStep = this.horizontalStep;\r\n        var verticalStep = this.verticalStep;\r\n        var verticalCheckersCount = 15;\r\n        var horizontalCheckersCount = 1;\r\n\r\n        var params = {\r\n\r\n            horizontalStep: horizontalStep,\r\n            verticalStep: verticalStep,\r\n            startPosition: hitDownPosition,\r\n            verticalCheckersCount: verticalCheckersCount,\r\n            horizontalCheckersCount: horizontalCheckersCount\r\n\r\n        };\r\n\r\n        this.fill(params);\r\n\r\n    };\r\n\r\n\r\n    PositionMapGenerator.prototype.fill = function(params) {\r\n\r\n        var self = this;\r\n\r\n        var baseDot = this.dot;\r\n\r\n        var verticalStepOut = this.verticalStepOut;\r\n\r\n        var startPosition           = params.startPosition;\r\n        var horizontalStep          = params.horizontalStep;\r\n        var verticalStep            = params.verticalStep;\r\n        var verticalCheckersCount   = params.verticalCheckersCount;\r\n        var horizontalCheckersCount = params.horizontalCheckersCount;\r\n\r\n        var cloneDot = baseDot.clone();\r\n            cloneDot.position.copy(startPosition);\r\n\r\n        var scene = this.scene;\r\n\r\n\r\n        for (var i = 0; i < horizontalCheckersCount; i++) {\r\n\r\n            for (var j = 0; j < verticalCheckersCount; j++) {\r\n\r\n                var dot = cloneDot.clone();\r\n                    dot.position.copy(cloneDot.position);\r\n\r\n                //scene.add(dot);\r\n\r\n                if (startPosition == this.positions.hitUp ||\r\n                    startPosition == this.positions.hitDown) {\r\n\r\n                    //dot.position.y += j * verticalStepOut;\r\n                    //dot.position.y +=  verticalStepOut;\r\n\r\n                    addToMap(this.positionMapIterator, dot.position);\r\n                    continue;\r\n\r\n                }\r\n                else if (\r\n                    j > 4 &&\r\n                    startPosition != this.positions.hitUp &&\r\n                    startPosition != this.positions.hitDown &&\r\n                    Math.abs(verticalStep) == Math.abs(this.verticalStep)\r\n                ) {\r\n\r\n                    dot.position.x += i * horizontalStep;\r\n                    dot.position.z += 4 * verticalStep;\r\n                    //dot.position.y += (j - 4) * verticalStepOut;\r\n                    dot.position.y +=  verticalStepOut;\r\n\r\n                    //this.positionMap[this.positionMapIterator].push(dot.position);\r\n                    addToMap(this.positionMapIterator, dot.position);\r\n                    continue;\r\n\r\n                }\r\n\r\n\r\n                dot.position.x += i * horizontalStep;\r\n                dot.position.z += j * verticalStep;\r\n\r\n                //this.positionMap[this.positionMapIterator].push(dot.position);\r\n                addToMap(this.positionMapIterator, dot.position);\r\n\r\n            }\r\n\r\n            this.positionMapIterator++;\r\n\r\n        }\r\n\r\n        function addToMap(index, position) {\r\n\r\n            var map = self.positionMap;\r\n\r\n            if (!map[index]) {\r\n\r\n                map[index] = [];\r\n\r\n            }\r\n\r\n            map[index].push(position);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.PositionMapGenerator = PositionMapGenerator;\r\n\r\n})();\r\n","(function(){\r\n\r\n    var CheckerManager = function(manager, isMirrored){\r\n\r\n        this.manager = manager;\r\n\r\n        var scene = this.manager.scene;\r\n\r\n        var checker = scene.getObjectByName(this.manager.config.checker.name);\r\n\r\n        var modelsPath = this.manager.config;\r\n\r\n        this.init(scene, checker, modelsPath, isMirrored);\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.initProperties = function() {\r\n\r\n        this.scaleFactor         = null;\r\n\r\n        this.positionMap         = null;\r\n\r\n        this.materialMap         = null;\r\n\r\n        this.positionMapIterator = null;\r\n\r\n        this.points              = null;\r\n\r\n        this.scene               = null;\r\n\r\n        this.checker             = null;\r\n\r\n        this.mirrorState         = 0;\r\n\r\n        this.isColorSwitched     = 0;\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.init = function(scene, checker, modelsPath, isMirrored) {\r\n\r\n        this.initProperties();\r\n\r\n        this.scene = scene;\r\n\r\n        this.isMirrored = isMirrored;\r\n\r\n        this.checker = checker;\r\n\r\n        this.checkerGeometryHigh = checker.geometry;\r\n\r\n        this.scaleFactor = new THREE.Vector3(0.01, 0.01, 0.01);\r\n\r\n        this.modelsPath = modelsPath;\r\n\r\n        this.initPositionMap();\r\n\r\n        this.initPoints();\r\n\r\n        this.initMaterialMap();\r\n\r\n        this.initCheckerPicker();\r\n\r\n        this.beautifyChecker();\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.initPoints = function () {\r\n\r\n        this.points = new THREE.Object3D();\r\n\r\n        var points = this.points;\r\n\r\n            points.name = 'Points';\r\n\r\n        var map = this.positionMap;\r\n\r\n        var scene = this.scene;\r\n\r\n        for (var index in map) {\r\n\r\n            var point = map[index];\r\n\r\n            var pointTHREE = new THREE.Object3D();\r\n                pointTHREE.name = 'point';\r\n                pointTHREE.index = index;\r\n\r\n            points.add(pointTHREE);\r\n\r\n        }\r\n\r\n        scene.add(points);\r\n\r\n    };\r\n\r\n\r\n    CheckerManager.prototype.initPositionMap = function() {\r\n\r\n        var isMirrored = this.isMirrored;\r\n\r\n        this.positionMapGenerator = new Backgammon3DBoard.PositionMapGenerator(this.scene);\r\n        this.positionMapGenerator.fillBoard();\r\n\r\n        this.positionMap = this.positionMapGenerator.positionMap.slice(0);\r\n\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.mirrorPositionMap = function(state, isAnimated){\r\n\r\n        if(state === undefined) return;\r\n\r\n        if(this.mirrorState == state) return;\r\n\r\n        this.mirrorState = state;\r\n\r\n        var positionMap = this.positionMap;\r\n\r\n        var first = positionMap.shift();\r\n        var down  = positionMap.splice(0, 12);\r\n        var up    = positionMap.splice(0, 12);\r\n\r\n        down = down.reverse();\r\n        up   = up.reverse();\r\n\r\n        positionMap.unshift.apply(positionMap, up);\r\n        positionMap.unshift.apply(positionMap, down);\r\n        positionMap.unshift(first);\r\n\r\n        var pMap0 = positionMap[0].slice(0);\r\n        var pMap25 = positionMap[25].slice(0);\r\n\r\n        positionMap[0] = positionMap[28];\r\n        positionMap[28] = pMap0;\r\n\r\n        positionMap[25] = positionMap[29];\r\n        positionMap[29] = pMap25;\r\n\r\n        this.recalculatePositions(isAnimated);\r\n\r\n        this.manager.textWriter.updatePositions(isAnimated);\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.initMaterialMap = function(){\r\n\r\n        var colorsMap = {white: 0xDFCAB0, black: 0x222222};\r\n\r\n        var blackMaterial = new THREE.MeshPhongMaterial({color: colorsMap.black});\r\n            blackMaterial.shininess = 30;\r\n\r\n        var whiteMaterial = new THREE.MeshPhongMaterial({color: colorsMap.white});\r\n            whiteMaterial.shininess = 30;\r\n\r\n        this.materialMap = [whiteMaterial, blackMaterial];\r\n\r\n        this.colorsMap = colorsMap;\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.initCheckerPicker = function () {\r\n\r\n        var manager = this.manager;\r\n\r\n        this.checkerPicker = new Backgammon3DBoard.CheckerPicker(manager, this.positionMap);\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.beautifyChecker = function() {\r\n\r\n        var checker = this.checker;\r\n\r\n        if (!checker) return;\r\n\r\n        checker.rotateX( - Math.PI / 2);\r\n\r\n        var material = new THREE.MeshPhongMaterial();\r\n\r\n        material.shininess = 0;\r\n        material.bumpScale = 0.01;\r\n\r\n        checker.material = material;\r\n\r\n        checker.combine = THREE.MixOperation;\r\n        checker.visible = true;\r\n        checker.castShadow = true;\r\n        checker.receiveShadow = true;\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.recalculatePositions = function(isAnimated) {\r\n\r\n        var self = this;\r\n\r\n        var scene = this.scene;\r\n\r\n        var points = scene.getObjectByName('Points');\r\n\r\n        var textWriter = this.manager.textWriter;\r\n\r\n        points.children.forEach(function (point, i) {\r\n\r\n            point.children.forEach(function (checker, j) {\r\n\r\n                self.checkerPicker.movementManager.animateCheckerMove(checker, self.positionMap[i][j], i, isAnimated);\r\n\r\n            });\r\n\r\n        });\r\n\r\n        textWriter && textWriter.updateCheckersCounts();\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.setCheckersInPoint = function(_point, _collection){\r\n\r\n        var point = this.points.children[_point];\r\n            point.children.length = 0;\r\n\r\n        var map = this.positionMap[_point];\r\n\r\n        var baseChecker = this.checker;\r\n\r\n        var materialMap = this.materialMap;\r\n\r\n        for(var i = 0; i < _collection.length; i++){\r\n\r\n            var position = map[i];\r\n\r\n            var cloneChecker             = baseChecker.clone();\r\n                cloneChecker.material    = materialMap[+_collection[i]];\r\n                cloneChecker.position.copy(position);\r\n                cloneChecker.index       = _point;\r\n                cloneChecker.readOnly    = true;\r\n                cloneChecker.checkerType = +_collection[i];\r\n\r\n                cloneChecker.rotation.x = this.manager.config.checker.name == \"Checker_01.001\" ? -Math.PI / 2 : cloneChecker.rotation.x;\r\n\r\n            if(_point == 0) {\r\n\r\n                cloneChecker.rotation.x =  -Math.PI ;\r\n\r\n            }\r\n\r\n            if(_point == 25) {\r\n\r\n                cloneChecker.rotation.x =  0 ;\r\n\r\n            }\r\n\r\n            point.children[i] = cloneChecker;\r\n\r\n        }\r\n\r\n        var textWriter = this.manager.textWriter;\r\n\r\n        textWriter.updateCheckersCounts();\r\n\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.setReadOnly = function(checkerType, isReadOnly ){\r\n\r\n        var scene = this.scene;\r\n\r\n        var points = scene.getObjectByName('Points');\r\n\r\n        var readOnlyPoints = points.children.filter(function(point){\r\n\r\n            if(point.children.length == 0) return false;\r\n\r\n            return point.children[point.children.length - 1].checkerType == checkerType;\r\n\r\n        });\r\n\r\n        readOnlyPoints.forEach(function (point) {\r\n\r\n            point.children.forEach(function (child) {\r\n\r\n                child.readOnly = isReadOnly;\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.setPlaceOfOut = function (type, place) {\r\n\r\n        if(this.mirrorState) {\r\n\r\n            this.mirrorPositionMap(0, false);\r\n            this.setPlaceOfOutForNormalMode(type, place);\r\n            this.mirrorPositionMap(1, false);\r\n\r\n        }else {\r\n\r\n            this.setPlaceOfOutForNormalMode(type, place);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.setPlaceOfOutForNormalMode = function (type, place) {\r\n\r\n        var positionMap          = this.positionMap;\r\n\r\n        var positionMapGenerator = this.positionMapGenerator;\r\n\r\n        var textWriter           = this.manager.textWriter;\r\n\r\n        if(type == 0) {\r\n\r\n            switch(place){\r\n                //case 0: {\r\n                //    positionMap[0] = positionMapGenerator.positionMap[25].slice(0);\r\n                //    positionMap[25] = positionMapGenerator.positionMap[0].slice(0);\r\n                //    break;\r\n                //}\r\n                //case 1: {\r\n                //    positionMap[0] = positionMapGenerator.positionMap[29].slice(0);\r\n                //    positionMap[29] = positionMapGenerator.positionMap[0].slice(0);\r\n                //    break;\r\n                //}\r\n                case 2: {\r\n                    positionMap[0] = positionMapGenerator.positionMap[0].slice(0);\r\n                    positionMap[25] = positionMapGenerator.positionMap[25].slice(0);\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    positionMap[0] = positionMapGenerator.positionMap[28].slice(0);\r\n                    positionMap[28] = positionMapGenerator.positionMap[0].slice(0);\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if(type == 1) {\r\n\r\n            switch(place){\r\n                case 0: {\r\n                    positionMap[25] = positionMapGenerator.positionMap[25].slice(0);\r\n                    positionMap[29] = positionMapGenerator.positionMap[29].slice(0);\r\n                    break;\r\n                }\r\n                case 1: {\r\n                    positionMap[25] = positionMapGenerator.positionMap[29].slice(0);\r\n                    positionMap[29] = positionMapGenerator.positionMap[25].slice(0);\r\n                    break;\r\n                }\r\n                //case 2: {\r\n                //    positionMap[25] = positionMapGenerator.positionMap[0].slice(0);\r\n                //    positionMap[0] = positionMapGenerator.positionMap[25].slice(0);\r\n                //    break;\r\n                //}\r\n                //case 3: {\r\n                //    positionMap[25] = positionMapGenerator.positionMap[28].slice(0);\r\n                //    positionMap[28] = positionMapGenerator.positionMap[25].slice(0);\r\n                //    break;\r\n                //}\r\n            }\r\n\r\n        }\r\n\r\n        textWriter && textWriter.updatePositions();\r\n        this.recalculatePositions();\r\n\r\n\r\n\r\n    };\r\n\r\n\r\n    CheckerManager.prototype.switchCheckersColors = function(state){\r\n\r\n        state = state || 0;\r\n\r\n        this.isColorSwitched = this.isColorSwitched == state ? this.isColorSwitched : state;\r\n\r\n        var colorSwitched = this.isColorSwitched;\r\n\r\n        var scene = this.scene;\r\n\r\n        var colorsMap = this.colorsMap;\r\n\r\n        var points = this.points;\r\n\r\n        var blackColor = new THREE.Color(colorsMap.black);\r\n        var whiteColor = new THREE.Color(colorsMap.white);\r\n\r\n        var self = this;\r\n\r\n        points.traverse(function(child){\r\n\r\n            if(child instanceof THREE.Mesh) {\r\n\r\n                var checker = child;\r\n\r\n                if(checker.checkerType == 1) {\r\n\r\n                    if(colorSwitched){\r\n\r\n                        checker.material = self.materialMap[0].clone();\r\n\r\n                    }else{\r\n\r\n                        checker.material = self.materialMap[1].clone();\r\n\r\n                    }\r\n\r\n                }else{\r\n\r\n                    if(colorSwitched){\r\n\r\n                        checker.material = self.materialMap[1].clone();\r\n\r\n                    }else{\r\n\r\n                        checker.material = self.materialMap[0].clone();\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        this.manager.textWriter.updateCheckersCounts();\r\n\r\n    };\r\n\r\n    CheckerManager.prototype.fillBoardFromMap = function() {\r\n\r\n        var self = this;\r\n\r\n        var scene = this.scene;\r\n\r\n        var map = this.positionMap;\r\n\r\n        var baseChecker = this.checker;\r\n\r\n        var points = this.points;\r\n\r\n        var material = baseChecker.material.clone();\r\n\r\n        var blackMaterial = new THREE.MeshPhongMaterial({color: 0x222222});\r\n        var whiteMaterial = new THREE.MeshPhongMaterial({color: 0xDFCAB0});\r\n\r\n        var materialMap = [whiteMaterial, blackMaterial];\r\n\r\n        for (var index in map) {\r\n\r\n            var point = map[index];\r\n\r\n            var pointTHREE = new THREE.Object3D();\r\n                pointTHREE.name = 'point';\r\n                pointTHREE.index = index;\r\n\r\n            points.add(pointTHREE);\r\n\r\n            var position = point[0];\r\n\r\n            if (index == 30) continue;\r\n\r\n            var cloneChecker = baseChecker.clone();\r\n                cloneChecker.material = materialMap[index % 2];\r\n                cloneChecker.position.copy(position);\r\n                cloneChecker.index = index;\r\n                cloneChecker.checkerType = index % 2;\r\n\r\n            pointTHREE.add(cloneChecker);\r\n\r\n        }\r\n\r\n        scene.add(points);\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.CheckerManager = CheckerManager;\r\n\r\n\r\n})();\r\n","(function(){\r\n\r\n    var Dice = function (manager, params, diceType, modelsPath){\r\n\r\n        this.manager = manager;\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n\r\n    Dice.prototype.initProperties = function(){\r\n\r\n        this.dump               = { position: [], rotation: [] };\r\n        this.dumpedAnimation    = {};\r\n\r\n        this.three              = null;\r\n        this.modelsPath         = null;\r\n        this.texturesMap        = null;\r\n        this.startPosition      = null;\r\n        this.DICE_TEXTURES_PATH = null;\r\n\r\n    };\r\n\r\n\r\n    Dice.prototype.init = function (manager, params, diceType, modelsPath) {\r\n\r\n        this.initProperties();\r\n\r\n        this.diceType = diceType;\r\n\r\n        this.startPosition = params.startPosition || {x: 0, y: 0, z: 0};\r\n\r\n        this.three = params.three;\r\n\r\n        this.modelsPath = modelsPath;\r\n\r\n        this.DICE_TEXTURES_PATH = this.modelsPath.texturesPath;\r\n\r\n        var self = this;\r\n\r\n        function getTexture(name){\r\n\r\n            var texture = THREE.ImageUtils.loadTexture(self.DICE_TEXTURES_PATH + name);\r\n            return texture;\r\n        }\r\n\r\n        this.texturesMap = {\r\n\r\n            white:{\r\n                '1': getTexture('dice_white/1.png'),\r\n\r\n                '2': getTexture('dice_white/2.png'),\r\n\r\n                '3': getTexture('dice_white/3.png'),\r\n\r\n                '4': getTexture('dice_white/4.png'),\r\n\r\n                '5': getTexture('dice_white/5.png'),\r\n\r\n                '6': getTexture('dice_white/6.png')\r\n            },\r\n\r\n            black:{\r\n                '1': getTexture('dice_black/1.png'),\r\n\r\n                '2': getTexture('dice_black/2.png'),\r\n\r\n                '3': getTexture('dice_black/3.png'),\r\n\r\n                '4': getTexture('dice_black/4.png'),\r\n\r\n                '5': getTexture('dice_black/5.png'),\r\n\r\n                '6': getTexture('dice_black/6.png')\r\n            },\r\n\r\n            red:  {\r\n                '1': getTexture('dice_red/1.png'),\r\n\r\n                '2': getTexture('dice_red/2.png'),\r\n\r\n                '3': getTexture('dice_red/3.png'),\r\n\r\n                '4': getTexture('dice_red/4.png'),\r\n\r\n                '5': getTexture('dice_red/5.png'),\r\n\r\n                '6': getTexture('dice_red/6.png')\r\n            }\r\n\r\n        };\r\n\r\n        this.currentTextureMap = {};\r\n\r\n    };\r\n\r\n    Dice.prototype.setStartPosition = function(x, y, z){\r\n\r\n        this.startPosition.x = x;\r\n        this.startPosition.y = y;\r\n        this.startPosition.z = z;\r\n\r\n    };\r\n\r\n    Dice.prototype.drop = function(num){\r\n\r\n        num = parseInt(num);\r\n\r\n        switch (num) {\r\n\r\n            case 1:\r\n                this.drop1();\r\n                break;\r\n\r\n            case 2:\r\n                this.drop2();\r\n                break;\r\n\r\n            case 3:\r\n                this.drop3();\r\n                break;\r\n\r\n            case 4:\r\n                this.drop4();\r\n                break;\r\n\r\n            case 5:\r\n                this.drop5();\r\n                break;\r\n\r\n            case 6:\r\n                this.drop6();\r\n                break;\r\n\r\n            default :\r\n                this.dropX();\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /* Drops */\r\n    Dice.prototype.drop1 = function(){\r\n\r\n        var animation = this.dumpedAnimation.result;\r\n        this.setNumber1(animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.drop2 = function(){\r\n\r\n        var animation = this.dumpedAnimation.result;\r\n        this.setNumber2(animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.drop3 = function(){\r\n\r\n        var animation = this.dumpedAnimation.result;\r\n        this.setNumber3(animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.drop4 = function(){\r\n\r\n        var animation = this.dumpedAnimation.result;\r\n        this.setNumber4(animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.drop5 = function(){\r\n\r\n        var animation = this.dumpedAnimation.result;\r\n        this.setNumber5(animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.drop6 = function(){\r\n\r\n        var animation = this.dumpedAnimation.result;\r\n        this.setNumber6(animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.dropX = function(){\r\n\r\n        var animation = this.dumpedAnimation.result;\r\n        this.setNumber6(animation);\r\n\r\n    };\r\n\r\n    /* Texture */\r\n    Dice.prototype.setNumber = function(num, animation){\r\n\r\n        this.three.visible = false;\r\n\r\n        animation = parseInt(animation);\r\n\r\n        if (isNaN(animation)) return;\r\n\r\n        var faceConfigMap = {\r\n\r\n            '1': [1, 2, 3, 6, 5, 4],\r\n\r\n            '2': [2, 3, 1, 5, 4, 6],\r\n\r\n            '3': [3, 1, 2, 4, 6, 5],\r\n\r\n            '4': [4, 5, 6, 3, 2, 1],\r\n\r\n            '5': [5, 6, 4, 2, 1, 3],\r\n\r\n            '6': [6, 4, 5, 1, 3, 2]\r\n\r\n        };\r\n\r\n        var texturesMap = this.currentTextureMap;\r\n\r\n        var index = faceConfigMap[1].indexOf(animation);\r\n\r\n        for (var i = 1; i <= 6; i++) {\r\n\r\n            var currentFaceMap = faceConfigMap[i];\r\n\r\n            if (currentFaceMap.indexOf(num) == index) {\r\n\r\n                var material = this.three.material;\r\n\r\n                material.map = texturesMap[i];\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n        /* Or in stand of map we can use this function*/\r\n        /*function diceArrayFromNumber(num){\r\n\r\n         var arr = [num];\r\n\r\n         for(var i = 0; i < 2; i++){\r\n\r\n         arr[i+1] = next(arr[i]);\r\n         arr[i+3] = 7 - arr[i];\r\n\r\n         }\r\n\r\n         arr[5] = 7 - arr[2];\r\n\r\n\r\n         function next(num){\r\n\r\n         return ( ( num % 3 ) + 1 ) % 6 + ( 3 * parseInt( num / 3.5 ) );\r\n\r\n         }\r\n\r\n         return arr;\r\n\r\n         }*/\r\n\r\n    };\r\n\r\n    Dice.prototype.setCurrentTextureMap = function(color){\r\n\r\n        color = color || '0';\r\n\r\n        this.color = color;\r\n\r\n        var colorMap = {\r\n\r\n            '0': 'white',\r\n\r\n            '1': 'black',\r\n\r\n            '2': 'red'\r\n        };\r\n\r\n        var texturesMap = this.texturesMap;\r\n\r\n        this.currentTextureMap = texturesMap[colorMap[color]];\r\n\r\n    };\r\n\r\n    Dice.prototype.setNumber1 = function(animation){\r\n\r\n        this.setNumber(1, animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.setNumber2 = function(animation){\r\n\r\n        this.setNumber(2, animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.setNumber3 = function(animation){\r\n\r\n        this.setNumber(3, animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.setNumber4 = function(animation){\r\n\r\n        this.setNumber(4, animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.setNumber5 = function(animation){\r\n\r\n        this.setNumber(5, animation);\r\n\r\n    };\r\n\r\n    Dice.prototype.setNumber6 = function(animation){\r\n\r\n        this.setNumber(6, animation);\r\n\r\n    };\r\n\r\n    /* Animations */\r\n\r\n    Dice.prototype.setDumpedAnimation = function(animation){\r\n\r\n        this.dumpedAnimation = animation;\r\n\r\n    };\r\n\r\n    Dice.prototype.playDumpAnimation = function(i, rollType){\r\n\r\n        this.three.visible = true;\r\n\r\n        var dump = this.dumpedAnimation;\r\n\r\n        var dumpPosition = dump.position[i];\r\n\r\n        var dumpRotation = dump.rotation[i];\r\n\r\n        if (!dumpPosition) return false;\r\n        if (!dumpRotation) return false;\r\n\r\n        if(!this.manager.isAnimated){\r\n\r\n            dumpPosition = dump.position[dump.position.length - 1];\r\n            dumpRotation = dump.rotation[dump.rotation.length - 1];\r\n\r\n        }\r\n\r\n        var positionVec3 = new THREE.Vector3();\r\n        var rotationVec3 = new THREE.Vector3();\r\n\r\n        var magicNumber = -0.38;\r\n        var z = this.startPosition.z;\r\n\r\n        positionVec3.copy(dumpPosition);\r\n        positionVec3.y -= 0.02;\r\n        rotationVec3.copy(dumpRotation);\r\n\r\n        switch(rollType){\r\n\r\n            case 1: {\r\n\r\n                rotationVec3.copy(dumpRotation).multiplyScalar(-1);\r\n                positionVec3.x = -positionVec3.x;\r\n                positionVec3.z -= (z + magicNumber);\r\n\r\n                break;\r\n\r\n            }\r\n\r\n            case 2: {\r\n\r\n                positionVec3.z -= (z + magicNumber);\r\n                break;\r\n\r\n            }\r\n\r\n            case 0: {\r\n\r\n                if(this.diceType == 1){\r\n\r\n                    rotationVec3.copy(dumpRotation).multiplyScalar(-1);\r\n                    positionVec3.x = -positionVec3.x;\r\n                    positionVec3.z -= (z + magicNumber);\r\n\r\n                }\r\n\r\n                break;\r\n\r\n            }\r\n\r\n            default : break;\r\n\r\n        }\r\n\r\n\r\n        positionVec3.y -= 0.02;\r\n\r\n        this.three.position.copy(positionVec3);\r\n\r\n        this.three.rotation.x = rotationVec3.x;\r\n        this.three.rotation.y = rotationVec3.y;\r\n        this.three.rotation.z = rotationVec3.z;\r\n\r\n        return true;\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.Dice = Dice;\r\n\r\n})();\r\n","(function(){\r\n\r\n\r\n    /* Dice Manager */\r\n\r\n    var DiceManager = function(managerscene, params, modelsPath, callback){\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    DiceManager.prototype.initProperties = function() {\r\n\r\n        this.dices                  = [];\r\n        this.animations             = [];\r\n        this.ANIMATION_FILE_ARRAY   = [];\r\n\r\n        this.scene                  = null;\r\n        this.audio                  = null;\r\n        this.params                 = null;\r\n        this.modelsPath             = null;\r\n        this.diceGeometry           = null;\r\n        this.animationIndex         = null;\r\n        this.ANIMATIONS_PATH        = null;\r\n        this.DICE_TEXTURES_PATH     = null;\r\n        this.isColorsSwitched       = null;\r\n\r\n\r\n    };\r\n\r\n    DiceManager.prototype.init = function ( manager, params, modelsPath, animations ) {\r\n\r\n        this.initProperties();      \r\n\r\n        var thisParams = { mass: 0.3, diceParams: {x: .2, y: .2, z: .2 } };\r\n\r\n        this.manager = manager;\r\n        this.scene = manager.scene;\r\n        this.dices = [];\r\n        this.diceGeometry = null;\r\n        this.params = params || thisParams;\r\n        this.animationIndex = -1;\r\n        this.isAnimationFromRight = false;\r\n\r\n        this.modelsPath = modelsPath;\r\n\r\n        this.ANIMATIONS_PATH     = this.modelsPath.animationsPath;\r\n        this.DICE_TEXTURES_PATH  = this.modelsPath.texturesPath;\r\n        this.ANIMATION_FILE_ARRAY  = [\r\n            '0.json',\r\n            '1.json'\r\n        ];\r\n\r\n        //this.audio = new Audio(this.modelsPath +'newScene/1.mp3');\r\n\r\n        this.initDiceGeometry();\r\n        this.initAnimations(animations);\r\n\r\n\r\n    };\r\n\r\n    DiceManager.prototype.createDice = function(diceType) {\r\n\r\n        return new Backgammon3DBoard.Dice( this, { three: this.createTHREE(null) }, diceType, this.modelsPath );\r\n\r\n    };\r\n\r\n    DiceManager.prototype.createDices = function() {\r\n\r\n        this.dices.push(this.createDice(1));\r\n        this.dices.push(this.createDice(2));\r\n\r\n    };\r\n\r\n\r\n    DiceManager.prototype.initAnimations = function(animations) {\r\n\r\n        this.animations = animations\r\n\r\n    };\r\n\r\n\r\n\r\n    DiceManager.prototype.initDiceGeometry = function() {\r\n\r\n        var scene = this.scene;\r\n\r\n        var mesh = scene.getObjectByName('Dice_01') || scene.children[0];\r\n\r\n        this.diceGeometry = mesh.geometry;\r\n\r\n        this.createDices();\r\n        this.addToScene();\r\n\r\n        scene.remove(mesh);\r\n\r\n    };\r\n\r\n    DiceManager.prototype.createTHREE = function(params) {\r\n\r\n        var self = this;\r\n\r\n        var _params = params || this.params;\r\n        var diceParams = _params.diceParams;\r\n\r\n        var x = diceParams.x * 2;\r\n        var y = diceParams.y * 2;\r\n        var z = diceParams.z * 2;\r\n\r\n        var dice = {};\r\n\r\n        if( this.diceGeometry ){\r\n\r\n            return createDiceFromGeometry();\r\n\r\n        }\r\n\r\n        function createDiceFromGeometry(){\r\n\r\n            var geometry = self.diceGeometry;\r\n            var scaleIndex = diceParams.x / 3.2;\r\n            self.scaleIndex = scaleIndex;\r\n\r\n            if(!geometry) return;\r\n\r\n            geometry.computeVertexNormals();\r\n\r\n            var diceMaterial = new THREE.MeshPhongMaterial();\r\n                diceMaterial.map = THREE.ImageUtils.loadTexture(self.DICE_TEXTURES_PATH + '1.png');\r\n                diceMaterial.combine = THREE.MultiplyOperation;\r\n                diceMaterial.shininess = 50;\r\n\r\n\r\n\r\n            var dice = new THREE.Mesh( geometry, diceMaterial);\r\n                dice.castShadow = true;\r\n                dice.receiveShadow = true;\r\n                dice.name = 'dice';\r\n                dice.scale.set(scaleIndex, scaleIndex, scaleIndex);\r\n                dice.visible = false;\r\n\r\n            return dice;\r\n\r\n        }\r\n\r\n        return dice;\r\n\r\n    };\r\n\r\n    DiceManager.prototype.update = function(delta) {\r\n\r\n        var dice1 = this.dices[0], dice2 = this.dices[1];\r\n\r\n        if(!dice1 || !dice2) return;\r\n\r\n        if(dice1.three && dice2.three && dice1.three.mesh && dice2.three.mesh) {\r\n\r\n            dice1.three = dice1.three.mesh;\r\n            dice2.three = dice2.three.mesh;\r\n\r\n        }\r\n\r\n        if(dice1 && dice2 && dice1.three.material && dice2.three.material) {\r\n\r\n            this.startAnimationHandler(delta);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    DiceManager.prototype.startAnimationHandler = function(delta) {\r\n\r\n        var dice1 = this.dices[0];\r\n        var dice2 = this.dices[1];\r\n\r\n        var rollType = this.rollType;\r\n\r\n        if(this.animationIndex < 0) return;\r\n\r\n        if(!dice1.playDumpAnimation(this.animationIndex, rollType) || !dice2.playDumpAnimation(this.animationIndex, rollType)) {\r\n\r\n            this.stopAnimation();\r\n\r\n        }\r\n\r\n        this.animationIndex += Math.round(delta );\r\n\r\n    };\r\n\r\n    DiceManager.prototype.playAnimation = function(rollType, isAnimated) {\r\n\r\n        this.isAnimated = isAnimated;\r\n\r\n        this.rollType = rollType;\r\n\r\n        this.animationIndex = 0;\r\n\r\n    };\r\n\r\n    DiceManager.prototype.stopAnimation = function() {\r\n\r\n        this.animationIndex = -10;\r\n\r\n    };\r\n\r\n    DiceManager.prototype.addToScene = function() {\r\n\r\n        var dice1 = this.dices[0],\r\n            dice2 = this.dices[1];\r\n        var scene = this.scene;\r\n\r\n        scene.add(dice1.three);\r\n        scene.add(dice2.three);\r\n\r\n    };\r\n\r\n    DiceManager.prototype.drop = function(num1, num2, rollType, isAnimated) {\r\n\r\n        this.lastRoll = [num1, num2];\r\n\r\n        var projectionObject = this.scene.getObjectByName('ProjectionObject');\r\n            projectionObject.renderOrder = 10;\r\n\r\n        var dice2 = this.dices[1];\r\n        var dice1 = this.dices[0];\r\n\r\n        dice1.three.visible = true;\r\n        dice2.three.visible = true;\r\n\r\n        if(num1 == 0 || num2 == 0 || !dice1 || !dice2) return;\r\n\r\n        this.setDiceColorsFromRollType(rollType);\r\n\r\n        dice1.setStartPosition(-10, 1, 0.2);\r\n        dice2.setStartPosition(-10, 1, 0.6);\r\n\r\n        dice1.setDumpedAnimation(this.animations[0]);\r\n        dice2.setDumpedAnimation(this.animations[1]);\r\n\r\n        dice1.drop(num1);\r\n        dice2.drop(num2);\r\n\r\n        this.playAnimation(rollType, isAnimated);\r\n        this.playSound();\r\n\r\n\r\n    };\r\n\r\n    DiceManager.prototype.setDiceColorsFromRollType = function (rollType) {\r\n\r\n        rollType = +rollType;\r\n\r\n        var dice1 = this.getDice1();\r\n        var dice2 = this.getDice2();\r\n\r\n        var isColorSwitched = this.manager.checkerManager.isColorSwitched;\r\n\r\n        switch (rollType){\r\n\r\n            case 0: {\r\n                dice1.setCurrentTextureMap(isColorSwitched ? 1 : 0);\r\n                dice2.setCurrentTextureMap(isColorSwitched ? 0 : 1);\r\n                break;\r\n            }\r\n\r\n            case 1: {\r\n                dice1.setCurrentTextureMap(isColorSwitched ? 1 : 0);\r\n                dice2.setCurrentTextureMap(isColorSwitched ? 1 : 0);\r\n                break;\r\n            }\r\n\r\n            case 2: {\r\n                dice1.setCurrentTextureMap(isColorSwitched ? 0 : 1);\r\n                dice2.setCurrentTextureMap(isColorSwitched ? 0 : 1);\r\n                break;\r\n            }\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n    DiceManager.prototype.switchDiceColors = function (state) {\r\n\r\n        var dice1 = this.getDice1();\r\n        var dice2 = this.getDice2();\r\n\r\n        var c1 = +!+dice1.color + \"\";\r\n        var c2 = +!+dice2.color + \"\";\r\n\r\n        dice1.setCurrentTextureMap(c1);\r\n        dice2.setCurrentTextureMap(c2);\r\n\r\n        if(!this.lastRoll) return;\r\n\r\n        this.drop(this.lastRoll[0], this.lastRoll[1], this.rollType, false);\r\n\r\n    };\r\n\r\n    DiceManager.prototype.setDiceState = function(diceNum, state){\r\n\r\n        var stateMap = [1, 0.4, 0.2];\r\n\r\n        var dice = this.getDice(diceNum);\r\n\r\n        dice.three.material.transparent = true;\r\n        dice.three.material.opacity = stateMap[state];\r\n\r\n    };\r\n\r\n    DiceManager.prototype.getDice1 = function() {\r\n\r\n        return this.getDice(1);\r\n\r\n    };\r\n\r\n    DiceManager.prototype.getDice2 = function() {\r\n\r\n        return this.getDice(2);\r\n\r\n    };\r\n\r\n    DiceManager.prototype.getDice = function(num) {\r\n\r\n        var index = num - 1;\r\n        return this.dices[index];\r\n\r\n    };\r\n\r\n    DiceManager.prototype.playSound = function() {\r\n\r\n        // CALL Back function need to be replaced\r\n\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.DiceManager = DiceManager;\r\n\r\n})();\r\n","(function () {\r\n\r\n    var DoubleCubeManager = function (manager) {\r\n\r\n        this.manager = manager;\r\n\r\n        var scene = this.manager.scene;\r\n\r\n        var config = this.manager.config;\r\n\r\n        this.init(scene, config);\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.init = function(scene, config){\r\n\r\n        this.initProperties();\r\n\r\n        this.scene = scene;\r\n\r\n        this.config = config;\r\n\r\n        this.initPositionMap();\r\n\r\n        this.initPoints();\r\n\r\n        this.initResetParams();\r\n\r\n        this.initCube();\r\n\r\n        this.addToScene();\r\n\r\n        this.initMovementManager();\r\n\r\n        this.initDoubleCubePicker();\r\n\r\n        this.checkDoubleCubeState();\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.initProperties = function () {\r\n\r\n        this.scene       = null;\r\n\r\n        this.config      = null;\r\n\r\n        this.cube        = null;\r\n\r\n        this.resetParams = null;\r\n\r\n        this.positionMap = null;\r\n\r\n        this.movementManager = null;\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.initCube = function () {\r\n\r\n        var config = this.config.double_cube;\r\n\r\n        var texturesPath = config.texturesPath;\r\n\r\n        var scene = this.scene;\r\n\r\n        var diceName = 'dice';\r\n\r\n        var dice = scene.getObjectByName(diceName);\r\n\r\n        var geometry = dice.geometry.clone();\r\n\r\n        var material = new THREE.MeshPhongMaterial();\r\n\r\n        var texture = THREE.ImageUtils.loadTexture( texturesPath + 'cube_black_64.png');\r\n            texture.minFilter = THREE.LinearMipMapLinearFilter;\r\n            texture.anisotropy = this.manager.renderer.getMaxAnisotropy();\r\n\r\n        material.map = texture;\r\n\r\n        var s = 0.08;\r\n        var cube = new THREE.Mesh(geometry, material);\r\n            cube.scale.set(s, s, s);\r\n            cube.name = config.name;\r\n            cube.index = config.name;\r\n            cube.castShadow = true;\r\n            cube.receiveShadow = true;\r\n            cube.readOnly = true;\r\n            cube.currentNumber = 64;\r\n            cube.exists = true;\r\n\r\n\r\n        this.cube = cube;\r\n\r\n        this.reset();\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.setReadOnly = function (state) {\r\n\r\n        var cube = this.cube;\r\n            cube.readOnly = state;\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.reset = function () {\r\n\r\n        var cube = this.cube;\r\n\r\n        var resetParams = this.resetParams;\r\n\r\n        cube.position.copy(resetParams.position);\r\n        cube.rotation.copy(resetParams.rotation);\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.initResetParams = function () {\r\n\r\n        var positionMap = this.positionMap;\r\n\r\n        var defaultRotation = new THREE.Euler(0, 0, 0);\r\n\r\n        this.resetParams = {\r\n\r\n            position: positionMap[0][0].clone(),\r\n            rotation: defaultRotation.clone()\r\n\r\n        };\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.addToScene = function () {\r\n\r\n        var scene = this.scene;\r\n\r\n        var cube = this.cube;\r\n\r\n        scene.add(cube);\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.initMovementManager = function () {\r\n\r\n        this.movementManager = new Backgammon3DBoard.MovementManager(this.manager);\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.initDoubleCubePicker = function() {\r\n\r\n        this.doubleCubePicker = new Backgammon3DBoard.DoubleCubePicker(this.manager, this.positionMap);\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.initPoints = function () {\r\n\r\n        this.points = new THREE.Object3D();\r\n\r\n        var points = this.points;\r\n            points.name = 'DoubleCubePoints';\r\n\r\n        var map = this.positionMap;\r\n\r\n        var scene = this.scene;\r\n\r\n        for (var index in map) {\r\n\r\n            var point = map[index];\r\n\r\n            var pointTHREE = new THREE.Object3D();\r\n                pointTHREE.name = 'double-cube-point';\r\n                pointTHREE.index = index;\r\n\r\n            points.add(pointTHREE);\r\n\r\n        }\r\n\r\n        scene.add(points);\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.initPositionMap = function () {\r\n\r\n        var y = 0.23;\r\n\r\n        var positionCenter  = new THREE.Vector3(     0, y   ,   0    );\r\n        var positionUp      = new THREE.Vector3(     0, 0.25,  -1.97 );\r\n        var positionDown    = new THREE.Vector3(     0, 0.25,   1.97 );\r\n        var positionLeft    = new THREE.Vector3( -1.97, y   ,   0    );\r\n        var positionRight   = new THREE.Vector3(  1.97, y   ,   0    );\r\n\r\n        this.positionMap = [\r\n\r\n            [ positionCenter ],\r\n            [ positionUp     ],\r\n            [ positionDown   ],\r\n            [ positionLeft   ],\r\n            [ positionRight  ]\r\n\r\n        ];\r\n\r\n        /*this.positionMap = {\r\n\r\n            center  : positionCenter  ,\r\n            up      : positionUp      ,\r\n            down    : positionDown    ,\r\n            left    : positionLeft    ,\r\n            right   : positionRight\r\n\r\n        }*/\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.reversePositionMap = function () {\r\n\r\n        var positionMap = this.positionMap;\r\n\r\n        var center  = positionMap.shift();\r\n        var ud = positionMap.splice(0, 2);\r\n        var lr = positionMap.splice(0, 2);\r\n\r\n        lr = lr.reverse();\r\n        ud = ud.reverse();\r\n\r\n        positionMap.push(center);\r\n        positionMap.push.apply(positionMap, ud);\r\n        positionMap.push.apply(positionMap, lr);\r\n\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.setNumber = function (num, isAnimated) {\r\n\r\n        var cube = this.cube;\r\n\r\n        if(cube.currentNumber == num) return;\r\n        if(cube.isRotating) return;\r\n\r\n        if(num == 'same') num = cube.currentNumber;\r\n\r\n        cube.currentNumber = num;\r\n\r\n        var manager = this.manager;\r\n\r\n        var movementManager = this.movementManager;\r\n\r\n        var boardRotationState = manager.movementManager.boardRotationState;\r\n\r\n        var rotationMap = {\r\n\r\n            '64':  {'z':  0          , x: 0, y: boardRotationState ? -Math.PI : 0 },\r\n            '2' :  {'z': -Math.PI / 2, x: 0, y: boardRotationState ? -Math.PI : 0 },\r\n            '4' :  {'z':  Math.PI / 2, x: 0, y: boardRotationState ? -Math.PI : 0 },\r\n\r\n            '8' :  {'x':  Math.PI / 2, z:       boardRotationState ?  Math.PI : 0, y: 0},\r\n            '16':  {'x': -Math.PI / 2, z:       boardRotationState ? -Math.PI : 0, y: 0},\r\n            '32':  {'x':  Math.PI    , z: 0, y: boardRotationState ?  Math.PI : 0 }\r\n\r\n        };\r\n\r\n        var currentMap = rotationMap[num];\r\n\r\n        if(!currentMap) return;\r\n\r\n        movementManager.rotateDoubleCube(currentMap, isAnimated);\r\n\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.setDoubleCube = function (place, value, isAnimated) {\r\n\r\n        this.doubleCubePicker.move({to: place}, isAnimated);\r\n\r\n        this.setNumber(value, isAnimated);\r\n\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.isDoubleCubeExist = function(state){\r\n\r\n        state = state || 0;\r\n\r\n        this.cube.exists = state;\r\n\r\n        this.checkDoubleCubeState();\r\n\r\n    };\r\n\r\n    DoubleCubeManager.prototype.checkDoubleCubeState = function () {\r\n\r\n        var cube = this.cube;\r\n\r\n            cube.exists = cube.exists || false;\r\n\r\n            cube.visible = cube.exists;\r\n\r\n    };\r\n\r\n\r\n    Backgammon3DBoard.DoubleCubeManager = DoubleCubeManager;\r\n\r\n\r\n})();\r\n","(function () {\r\n\r\n    var MovementManager = function (manager) {\r\n\r\n        this.manager = manager;\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    MovementManager.prototype.initProperties = function () {\r\n\r\n        this.boardDegreeState = 1;\r\n\r\n    };\r\n\r\n    MovementManager.prototype.init = function () {\r\n\r\n        this.initProperties();\r\n\r\n    };\r\n\r\n    MovementManager.prototype.animateCheckerMove = function (checker, toPosition, index, isAnimated) {\r\n\r\n        var self = this;\r\n\r\n        var from     = checker.position;\r\n        var rotation = checker.rotation;\r\n\r\n        checker.isMoving = true;\r\n\r\n        var t1 = isAnimated ? 215: 0;\r\n        var t2 = isAnimated ? 280: 0;\r\n\r\n        switch (index) {\r\n\r\n            case 0: new TWEEN.Tween(rotation)\r\n                .to({x: - Math.PI, y: 0, z: 0}, t1)\r\n                .easing(TWEEN.Easing.Exponential.Out)\r\n                .start(); break;\r\n\r\n            case 25: new TWEEN.Tween(rotation)\r\n                .to({x: 0, y: 0, z: 0}, t1)\r\n                .easing(TWEEN.Easing.Exponential.Out)\r\n                .start(); break;\r\n\r\n            default : {\r\n\r\n                if(!rotation) break;\r\n\r\n                new TWEEN.Tween(rotation)\r\n                    .to({x: - Math.PI / 2, y: 0, z: 0}, t1)\r\n                    .easing(TWEEN.Easing.Exponential.Out)\r\n                    .start(); break;\r\n            }\r\n        }\r\n\r\n        !checker.mouseMove &&\r\n        new TWEEN.Tween(from)\r\n            .to({x: toPosition.x, z: toPosition.z}, t2)\r\n            .easing(TWEEN.Easing.Exponential.Out)\r\n            .onUpdate(function (i) {\r\n\r\n                var angle = i * Math.PI;\r\n                var y = 3 * Math.sin(angle);\r\n                y = y > 0.5 ? 0.5: y;\r\n                y = y < toPosition.y ? toPosition.y: y;\r\n\r\n                from.y = y;\r\n            })\r\n            .onComplete(function () {\r\n\r\n                from.y = toPosition.y;\r\n                checker.isMoving = false;\r\n                checker.mouseMove = false;\r\n\r\n            })\r\n            .start();\r\n\r\n\r\n        checker.mouseMove &&\r\n        new TWEEN.Tween(from)\r\n            .to(toPosition, t2)\r\n            .easing(TWEEN.Easing.Exponential.Out)\r\n            .onComplete(function () {\r\n\r\n                checker.isMoving = false;\r\n                checker.mouseMove = false;\r\n\r\n            })\r\n            .start();\r\n\r\n\r\n\r\n    };\r\n\r\n    MovementManager.prototype.rotateBoard = function (state, isAnimated) {\r\n\r\n        if(this.boardRotationState == state) return;\r\n\r\n        if(this.isCameraRotating) return;\r\n\r\n        this.boardRotationState = state;\r\n\r\n        var config = this.manager.config;\r\n\r\n        var camera = this.manager.camera;\r\n\r\n        var textWriter = this.manager.textWriter;\r\n\r\n        var cameraStartY = camera.position.y;\r\n\r\n        var lookAtVector = this.manager.cameraControls.target.clone();\r\n\r\n        var basePosition = config.camera.position.clone();\r\n\r\n        var time = isAnimated ? 1000 : 0;\r\n\r\n        var self = this;\r\n\r\n        switch(state){\r\n            case 0: {\r\n                camera.position.z = this.boardDegreeState ?  -basePosition.z : -0.000001;\r\n                break;\r\n            }\r\n            case 1: {\r\n                camera.position.z = this.boardDegreeState ?  basePosition.z : 0.000001;\r\n                break;\r\n            }\r\n            default :{\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        var cameraR = camera.position.z;\r\n\r\n        var angle = {value: 0};\r\n\r\n        var value = state > 0 ? -Math.PI : Math.PI;\r\n\r\n        this.rotateDoubleCubeWithCamera(isAnimated);\r\n\r\n        this.rotateCheckerNumbersWithCamera(isAnimated);\r\n\r\n        self.animate(angle, { value: value }, time , 'Linear', 'None',\r\n\r\n            function () {\r\n\r\n                camera.lookAt(lookAtVector);\r\n\r\n                self.isCameraRotating = true;\r\n\r\n            }, function () {\r\n\r\n                camera.position.x = cameraR * Math.sin(angle.value);\r\n                camera.position.z = cameraR * Math.cos(angle.value);\r\n                camera.lookAt(lookAtVector);\r\n\r\n            }, function () {\r\n\r\n                camera.lookAt(lookAtVector);\r\n\r\n                self.isCameraRotating = false;\r\n\r\n            });\r\n\r\n        isAnimated && self.animate(camera.position, {y: 22}, time / 2, 'Sinusoidal', \"InOut\",\r\n\r\n            function () {\r\n\r\n                camera.lookAt(lookAtVector);\r\n\r\n            }, function () {\r\n\r\n                camera.lookAt(lookAtVector);\r\n\r\n            }, function () {\r\n\r\n                self.animate(camera.position, {y: cameraStartY}, time / 2, 'Sinusoidal', \"In\",\r\n\r\n                    function () {\r\n\r\n                        camera.lookAt(lookAtVector);\r\n\r\n                    }, function () {\r\n\r\n                        camera.lookAt(lookAtVector);\r\n\r\n                    }, function () {\r\n\r\n                        camera.lookAt(lookAtVector);\r\n\r\n                    });\r\n\r\n\r\n            });\r\n\r\n        textWriter.updatePositions();\r\n\r\n\r\n    };\r\n\r\n    MovementManager.prototype.setBoardDegreeState = function(state, isAnimated) {\r\n\r\n        if(this.boardDegreeState == state) return;\r\n        if(this.isCameraRotating) return;\r\n\r\n        this.boardDegreeState = state;\r\n\r\n        var manager = this.manager;\r\n\r\n        var camera = this.manager.camera;\r\n\r\n        var cameraBasePosition = this.manager.config.camera.position.clone();\r\n\r\n        var lookAtVector = this.manager.cameraControls.target;\r\n\r\n        var boardRotationState = this.boardRotationState;\r\n\r\n        var textWriter = this.manager.textWriter;\r\n\r\n            textWriter.updatePositions();\r\n\r\n        var degree;\r\n\r\n        var configZoom = manager.config.camera.zoom;\r\n\r\n        var zoom;\r\n\r\n        switch (state) {\r\n\r\n            case 0: degree = boardRotationState ? -0.000001 : 0.000001; zoom = 1.12/*22*/; break;\r\n            case 1: degree = boardRotationState ? -cameraBasePosition.z : cameraBasePosition.z; zoom = configZoom; break;\r\n\r\n            default: return;\r\n\r\n        }\r\n\r\n        var time = isAnimated > 0 ? 600 : 0;\r\n\r\n        this.animate(camera.position, {z: degree, x: 0}, time, 'Linear', 'None', function () {\r\n\r\n            camera.lookAt(lookAtVector);\r\n\r\n        }, function () {\r\n\r\n            camera.lookAt(lookAtVector);\r\n\r\n        }, function () {\r\n\r\n            camera.lookAt(lookAtVector);\r\n\r\n        });\r\n\r\n        this.animate(camera, {zoom: zoom}, time, 'Linear', 'None', function () {\r\n\r\n            camera.updateProjectionMatrix();\r\n\r\n        }, function () {\r\n\r\n            camera.updateProjectionMatrix();\r\n\r\n        }, function () {\r\n\r\n            camera.updateProjectionMatrix();\r\n\r\n        });\r\n\r\n    };\r\n\r\n    MovementManager.prototype.animate = function (from, to, time, anim1, anim2, onStart, onUpdate, onComplete) {\r\n\r\n        new TWEEN.Tween(from)\r\n            .to(to, time)\r\n            .easing(TWEEN.Easing[anim1][anim2])\r\n            .onStart(function(){\r\n\r\n                onStart && onStart();\r\n\r\n            })\r\n            .onUpdate(function () {\r\n\r\n                onUpdate && onUpdate();\r\n\r\n            })\r\n            .onComplete(function () {\r\n\r\n                onComplete && onComplete();\r\n\r\n            })\r\n            .start();\r\n\r\n    };\r\n\r\n    MovementManager.prototype.update = function (delta) {\r\n\r\n        //this.isCameraRotating && this.rotateCamera(delta);\r\n\r\n    };\r\n\r\n    MovementManager.prototype.rotateDoubleCubeWithCamera = function (isAnimated) {\r\n\r\n\r\n        var doubleCubeManager = this.manager.doubleCubeManager;\r\n            doubleCubeManager.setNumber('same', isAnimated);\r\n\r\n    };\r\n\r\n\r\n    MovementManager.prototype.moveDoubleCubeUpDown = function (isAnimated) {\r\n\r\n        if(!isAnimated) return;\r\n\r\n        var self = this;\r\n\r\n        var doubleCube = this.manager.doubleCubeManager.cube;\r\n\r\n        var moveUpVector = doubleCube.position.clone();\r\n            moveUpVector.y = 0.5;\r\n\r\n        var moveDownVector = doubleCube.position.clone();\r\n            moveDownVector.y = 0.23;\r\n\r\n        this.animate(doubleCube.position, {y: moveUpVector.y}, 500, 'Linear', 'None', null, null, function () {\r\n\r\n            self.animate(doubleCube.position, {y: moveDownVector.y}, 500, 'Linear', 'None');\r\n\r\n        });\r\n\r\n    };\r\n\r\n    MovementManager.prototype.rotateDoubleCube = function (rotation, isAnimated) {\r\n\r\n        var doubleCube = this.manager.doubleCubeManager.cube;\r\n\r\n        var time = isAnimated ? 1000 : 0;\r\n\r\n        this.animate(doubleCube.rotation, rotation, time, 'Linear', 'None' ,function() {\r\n\r\n            doubleCube.isRotating = true;\r\n\r\n        }, null, function () {\r\n\r\n            doubleCube.isRotating = false;\r\n\r\n        });\r\n\r\n        this.moveDoubleCubeUpDown(isAnimated);\r\n\r\n    };\r\n\r\n\r\n\r\n    MovementManager.prototype.animateDoubleCubeMove = function (doubleCube, toPosition, isAnimated) {\r\n\r\n        var self = this;\r\n\r\n        var from = doubleCube.position;\r\n\r\n        var t1 = isAnimated ? 400 : 0;\r\n        var t2 = isAnimated ? 50 : 0;\r\n\r\n        self.animate(from, {y: 0.5}, t2, 'Linear', 'None', null, null, function () {\r\n\r\n            self.animate(from, {x: toPosition.x, z: toPosition.z}, t1, 'Linear', 'None', null, null, function () {\r\n\r\n                self.animate(from, {y: 0.23}, t2, 'Linear', 'None');\r\n\r\n            });\r\n\r\n        });\r\n\r\n\r\n\r\n    };\r\n\r\n    MovementManager.prototype.rotateCheckerNumbersWithCamera = function (isAnimated) {\r\n\r\n        var self = this;\r\n\r\n        var time = isAnimated ? 1000 : 0;\r\n\r\n        var checkerNumbers = this.manager.textWriter.points;\r\n\r\n        var angle = this.boardRotationState ? -Math.PI : 0;\r\n\r\n        checkerNumbers.traverse(function (child) {\r\n\r\n            if(child instanceof THREE.Mesh) {\r\n\r\n                self.animate(child.rotation, {z:angle}, time, 'Linear', 'None');\r\n\r\n            }\r\n\r\n        });\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.MovementManager = MovementManager;\r\n\r\n})();\r\n","(function () {\r\n\r\n\r\n    var PlatformDetector = function (domContainer, eventSource, config) {\r\n\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.init = function (domContainer, eventSource, config) {\r\n\r\n        this.initProperties(domContainer, eventSource, config);\r\n\r\n        this.detect();\r\n\r\n        this.initRenderer();\r\n\r\n        this.initCanvas();\r\n\r\n        this.connectEvents();\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.initProperties = function (domContainer, eventSource, config) {\r\n\r\n        this.domContainer = domContainer;\r\n\r\n        this.eventSource = eventSource;\r\n\r\n        this.config = config;\r\n\r\n        this.isWeb     = null;\r\n\r\n        this.isMobile  = null;\r\n\r\n        this.canvas = null;\r\n\r\n        this.mouseDowns = [];\r\n\r\n        this.mouseUps   = [];\r\n\r\n        this.mouseMoves = [];\r\n\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.detect = function () {\r\n\r\n        try {\r\n\r\n            this.isWeb = HTMLDivElement !== undefined;\r\n\r\n        }catch(e){\r\n\r\n            this.isWeb = false;\r\n\r\n        }\r\n\r\n        this.isMobile = this.mobileCheck();\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.mobileCheck = function() {\r\n\r\n        var check = false;\r\n\r\n        try{\r\n\r\n            (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4)))check = true})(navigator && navigator.userAgent || navigator && navigator.vendor|| window && window.opera);\r\n\r\n        }catch(e){\r\n\r\n            console.log(\"NO Navigator\");\r\n\r\n        }\r\n\r\n\r\n        return check;\r\n    };\r\n\r\n\r\n    PlatformDetector.prototype.setCoordsFromMobileEvent = function(event) {\r\n\r\n        if(!this.isMobile) return;\r\n\r\n        var touch = event.touches && event.touches[0];\r\n\r\n        var layerX = touch && touch.clientX;\r\n        var layerY = touch && touch.clientY;\r\n\r\n        event.layerX = layerX;\r\n        event.layerY = layerY;\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.initRenderer = function () {\r\n\r\n        var isWeb = this.isWeb;\r\n\r\n        if(isWeb){\r\n            this.initRendererForWeb();\r\n            console.log(\"IN WEB\");\r\n            if(this.isMobile) console.log(\"IN MOBILE\");\r\n        }\r\n        else{\r\n            this.initRendererForQT();\r\n            console.log(\"IN QT\");\r\n        }\r\n\r\n        return this.renderer;\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.initRendererForWeb = function () {\r\n\r\n        var domContainer = this.domContainer;\r\n\r\n        var WIDTH = domContainer.clientWidth;\r\n\r\n        var HEIGHT = domContainer.clientHeight;\r\n\r\n        var config = this.config.renderer;\r\n\r\n        var renderer = new THREE.WebGLRenderer({\r\n            antialias:  config.antialias,\r\n            alpha:      config.alpha\r\n        });\r\n\r\n        renderer.shadowMap.enabled  = this.isMobile ? false : config.shadowMap.enabled;\r\n        renderer.shadowMap.soft     = this.isMobile ? false : config.shadowMap.soft;\r\n\r\n        renderer.setSize(WIDTH, HEIGHT);\r\n\r\n        var domElement = renderer.domElement;\r\n        domElement.oncontextmenu = function(){ return false; };\r\n\r\n        domContainer.appendChild(renderer.domElement);\r\n\r\n        this.renderer = renderer;\r\n\r\n    };\r\n\r\n    //PlatformDetector.prototype.initRendererForWeb = function () {\r\n    //\r\n    //    var domContainer = this.domContainer;\r\n    //\r\n    //    var WIDTH = domContainer.clientWidth;\r\n    //\r\n    //    var HEIGHT = domContainer.clientHeight;\r\n    //\r\n    //    var config = this.config.renderer;\r\n    //\r\n    //    var canvas = document.createElement('canvas');\r\n    //\r\n    //    var gl = canvas.getContext('webgl2');\r\n    //\r\n    //    var renderer = new THREE.WebGLRenderer({\r\n    //        canvas: canvas,\r\n    //        context: gl,\r\n    //        antialias: config.antialias,\r\n    //        alpha: config.alpha\r\n    //    });\r\n    //\r\n    //    renderer.shadowMap.enabled = config.shadowMap.enabled;\r\n    //    renderer.shadowMap.soft = config.shadowMap.soft;\r\n    //\r\n    //    renderer.setSize(WIDTH, HEIGHT);\r\n    //\r\n    //    domContainer.appendChild(renderer.domElement);\r\n    //\r\n    //    this.renderer = renderer;\r\n    //\r\n    //};\r\n\r\n    PlatformDetector.prototype.initRendererForQT = function () {\r\n\r\n        var canvas = this.domContainer;\r\n\r\n        var config = this.config.renderer;\r\n\r\n        var renderer = new THREE.Canvas3DRenderer({\r\n            antialias:  config.antialias,\r\n            alpha:      config.alpha,\r\n            canvas:     canvas,\r\n            devicePixelRatio: canvas.devicePixelRatio\r\n        });\r\n\r\n\r\n        renderer.setSize(canvas.width, canvas.height);\r\n        //renderer.setClearColor(\"red\");\r\n        renderer.shadowMapEnabled = config.shadowMap.enabled;\r\n        renderer.shadowMapSoft = config.shadowMap.soft;\r\n\r\n        this.renderer = renderer;\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.addMouseDownFunction = function (mouseDownFunction) {\r\n\r\n        if(mouseDownFunction){\r\n            this.mouseDowns.push(mouseDownFunction);\r\n        }\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.addMouseMoveFunction = function (mouseMoveFunction) {\r\n\r\n        if(mouseMoveFunction){\r\n            this.mouseMoves.push(mouseMoveFunction);\r\n        }\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.addMouseUpFunction = function (mouseUpFunction) {\r\n\r\n        if(mouseUpFunction){\r\n            this.mouseUps.push(mouseUpFunction);\r\n        }\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.connectEvents = function () {\r\n\r\n        this.connectMouseDown();\r\n        this.connectMouseMove();\r\n        this.connectMouseUp();\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.removeEvents = function () {\r\n\r\n        this.removeMouseEvents();\r\n        this.removeResizeEvent();\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.removeMouseEvents = function(){\r\n\r\n        if(!this.isWeb && !this.isMobile) return;\r\n\r\n        var mouseMoves = this.mouseMoves;\r\n\r\n        var canvas = this.renderer.domElement;\r\n\r\n        var eventMap = {\r\n            '0': \"touchstart\",\r\n            '1': \"touchmove\",\r\n            '2': \"touchend\"\r\n        };\r\n\r\n        mouseMoves.forEach(function (mm, i) {\r\n\r\n            canvas.removeEventListener(eventMap[i], mm, false);\r\n\r\n        });\r\n    };\r\n\r\n    PlatformDetector.prototype.removeResizeEvent = function () {\r\n\r\n        if(!this.isWeb && !this.isMobile) return;\r\n\r\n        window.removeEventListener('resize', this.resizeFunction, false);\r\n\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.connectMouseDown = function () {\r\n\r\n        if( this.isMouseDownConnected ) return;\r\n\r\n        var self = this;\r\n\r\n        var mouseDown = function (event) {\r\n\r\n            //event.preventDefault  && event.preventDefault();\r\n            //event.stopPropagation && event.stopPropagation();\r\n\r\n            self.setCoordsFromMobileEvent(event);\r\n\r\n            for(var i = 0; i < self.mouseDowns.length; i ++) {\r\n\r\n                var func = self.mouseDowns[i];\r\n                func(event);\r\n                //console.log(\"Down: \", event);\r\n\r\n            }\r\n\r\n        };\r\n\r\n        if(this.isWeb){\r\n\r\n            var canvas = this.renderer.domElement;\r\n\r\n            if(this.isMobile){\r\n\r\n                canvas.addEventListener(\"touchstart\", mouseDown, false);\r\n                return;\r\n\r\n            }\r\n\r\n            canvas.onmousedown = mouseDown;\r\n\r\n        } else {\r\n\r\n            var eventSource = this.eventSource;\r\n\r\n            eventSource.mouseDown.connect(mouseDown);\r\n\r\n        }\r\n\r\n        this.isMouseDownConnected = true;\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.connectMouseMove = function () {\r\n\r\n        if(this.isMouseMoveConnected) return;\r\n\r\n        var self = this;\r\n\r\n        var mouseMove = function (event) {\r\n\r\n            if(self.isMobile) {\r\n                event.preventDefault  && event.preventDefault();\r\n                event.stopPropagation && event.stopPropagation();\r\n            }\r\n\r\n            self.setCoordsFromMobileEvent(event);\r\n\r\n            for(var i = 0; i < self.mouseDowns.length; i ++) {\r\n\r\n                var func = self.mouseMoves[i];\r\n                if(self.isWeb)event.preventDefault();\r\n                func(event);\r\n\r\n            }\r\n\r\n        };\r\n\r\n        if(this.isWeb){\r\n\r\n            var canvas = this.renderer.domElement;\r\n\r\n            if(this.isMobile){\r\n                canvas.addEventListener(\"touchmove\", mouseMove, false);\r\n                return;\r\n            }\r\n\r\n            canvas.onmousemove = mouseMove;\r\n\r\n        } else {\r\n\r\n            var eventSource = this.eventSource;\r\n\r\n            eventSource.mouseMove.connect(mouseMove);\r\n        }\r\n\r\n        this.isMouseMoveConnected = true;\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.connectMouseUp = function () {\r\n\r\n        if(this.isMouseUpConnected) return;\r\n\r\n        var self = this;\r\n\r\n        var mouseUp = function (event) {\r\n\r\n            //event.preventDefault  && event.preventDefault();\r\n            //event.stopPropagation && event.stopPropagation();\r\n\r\n            self.setCoordsFromMobileEvent(event);\r\n\r\n            for(var i = 0; i < self.mouseDowns.length; i ++) {\r\n\r\n                var func = self.mouseUps[i];\r\n                func(event);\r\n                func(event);\r\n\r\n            }\r\n\r\n        };\r\n\r\n        if(this.isWeb){\r\n\r\n            var canvas = this.renderer.domElement;\r\n\r\n            if(this.isMobile){\r\n\r\n                canvas.addEventListener(\"touchend\", mouseUp, false);\r\n                return;\r\n\r\n            }\r\n\r\n            canvas.onmouseup = mouseUp;\r\n\r\n        } else {\r\n\r\n            var eventSource = this.eventSource;\r\n\r\n            eventSource.mouseUp.connect(mouseUp);\r\n        }\r\n\r\n        this.isMouseUpConnected = true;\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.connectResize = function (resizeFunction) {\r\n\r\n        var domContainer = this.domContainer;\r\n\r\n        this.resizeFunction = resizeFunction;\r\n\r\n        if(this.isWeb){\r\n\r\n            window.addEventListener('resize', resizeFunction, false)\r\n            ;//onresize = resizeFunction;\r\n\r\n        }else{\r\n\r\n            domContainer.resize_GL.connect(resizeFunction);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.initCanvas = function(){\r\n\r\n\r\n        if(this.isWeb){\r\n\r\n            this.canvas = this.renderer.domElement;\r\n\r\n        } else {\r\n\r\n            this.canvas = this.domContainer;\r\n\r\n        }\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.getCanvas = function(){\r\n\r\n        return this.canvas;\r\n\r\n    };\r\n\r\n    PlatformDetector.prototype.getRenderer = function(){\r\n\r\n        return this.renderer;\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.PlatformDetector = PlatformDetector;\r\n\r\n})();\r\n\r\n\r\n","(function(){\r\n\r\n    var BoardLoader = function(){\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.initProperties = function() {\r\n\r\n        this.loader = null;\r\n        this.config = null;\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.init = function(config){\r\n\r\n        this.initProperties();\r\n\r\n        this.config = config;\r\n\r\n        this.loader = new THREE.ObjectLoader();\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.loadAll = function(callback){\r\n\r\n            var self = this;\r\n\r\n            this.loadBoard( function (boardScene){\r\n\r\n                    self.loadChecker( function (checkerScene){\r\n\r\n                            var checkerName = self.config.checker.name;\r\n\r\n                            var checker = checkerScene.getObjectByName(checkerName);\r\n\r\n                            //checker.geometry.rotateX(-Math.PI / 2);\r\n\r\n                            boardScene.add(checker);\r\n\r\n                            self.loadDice( function (diceScene){\r\n\r\n                                    var diceName = self.config.dice.name;\r\n\r\n                                    var dice = diceScene.getObjectByName(diceName);\r\n\r\n                                    boardScene.add(dice);\r\n\r\n\r\n                                    self.loadDiceAnimations(function (animations) {\r\n\r\n                                            if(callback) callback(boardScene, animations);\r\n\r\n                                    });\r\n\r\n                            });\r\n\r\n                    });\r\n\r\n            })\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.xhrGet = function (url, success, error) {\r\n\r\n        var loadingManager = new THREE.LoadingManager();\r\n\r\n        var xhr = new THREE.XHRLoader(loadingManager);\r\n\r\n        xhr.load(url, success, error);\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.loadBoard = function(callback){\r\n\r\n        var boardPath = this.config.board.objectPath;\r\n\r\n        var texturesPath = this.config.board.texturesPath;\r\n\r\n        var loader = this.loader;\r\n\r\n            loader.setTexturePath(texturesPath);\r\n\r\n            loader.load(boardPath, callback);\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.loadChecker = function(callback){\r\n\r\n        var checkerPath = this.config.checker.objectPath;\r\n\r\n        var texturesPath = this.config.checker.texturesPath;\r\n\r\n        var loader = this.loader;\r\n\r\n            loader.setTexturePath(texturesPath);\r\n\r\n            loader.load(checkerPath, callback);\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.loadDice = function(callback){\r\n\r\n        var dicePath = this.config.dice.objectPath;\r\n\r\n        var texturesPath = this.config.dice.texturesPath;\r\n\r\n        var loader = this.loader;\r\n\r\n            loader.setTexturePath(texturesPath);\r\n\r\n            loader.load(dicePath, callback);\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.loadPlane = function (callback) {\r\n\r\n        var planePath = this.config.plane.objectPath;\r\n\r\n        var texturesPath = this.config.plane.texturesPath;\r\n\r\n        var loader = this.loader;\r\n\r\n            loader.setTexturePath(texturesPath);\r\n\r\n            loader.load(planePath, callback)\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.loadDiceAnimations = function (success) {\r\n\r\n        var self = this;\r\n\r\n        var animationsFiles = [\r\n            '0.json',\r\n            '1.json'\r\n        ];\r\n        var animationsPath = this.config.dice.animationsPath;\r\n\r\n        var animationsCount = animationsFiles.length;\r\n\r\n        var animations = {};\r\n\r\n        for(var i = 0; i < animationsCount; i++){\r\n\r\n            (function (_i) {\r\n\r\n                var fileName = animationsFiles[_i];\r\n                var fullFileName = animationsPath + fileName;\r\n\r\n                self.xhrGet(fullFileName, function (r) {\r\n\r\n                    r = JSON.parse(r);\r\n                    animations[_i] = r;\r\n\r\n                    if(Object.keys(animations).length == animationsCount){\r\n\r\n                        success && success(animations);\r\n\r\n                    }\r\n\r\n                });\r\n\r\n            }(i));\r\n\r\n        }\r\n\r\n    };\r\n\r\n    BoardLoader.prototype.setTexturePath = function(path){\r\n\r\n        this.loader.setTexturePath.apply(this, arguments);\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.BoardLoader = BoardLoader;\r\n\r\n})();\r\n","(function(){\r\n\r\n    var Picker = function () {\r\n\r\n    };\r\n\r\n    Picker.prototype = {\r\n\r\n        mouse               : new THREE.Vector2(),\r\n\r\n        raycaster           : new THREE.Raycaster(),\r\n\r\n        selectableObjects   : [],\r\n\r\n        projectionObject    : null,\r\n\r\n        intersectProjection : null,\r\n\r\n        intersectObject     : null,\r\n\r\n        clickStarted        : Date.now(),\r\n\r\n        timeInterval        : 0,\r\n\r\n\r\n        initParent: function (manager) {\r\n\r\n            this.scene              = manager.scene;\r\n\r\n            this.camera             = manager.camera;\r\n\r\n            this.cameraControls     = manager.cameraControls;\r\n\r\n            this.platformDetector   = manager.platformDetector;\r\n\r\n            this.canvas             = this.platformDetector.getCanvas();\r\n\r\n            this.domContainer       = this.platformDetector.domContainer;\r\n\r\n            this.initProjectionObject();\r\n\r\n            this.initEvents();\r\n\r\n        },\r\n\r\n        initProjectionObject: function () {\r\n\r\n            var scene = this.scene;\r\n\r\n            this.projectionObject = scene.getObjectByName('ProjectionObject');\r\n\r\n        },\r\n\r\n        initEvents: function () {\r\n\r\n            this.addMouseDownEvent();\r\n            this.addMouseMoveEvent();\r\n            this.addMouseUpEvent();\r\n\r\n        },\r\n\r\n        addMouseDownEvent: function () {\r\n\r\n            var self = this;\r\n\r\n            var manager = this.manager;\r\n\r\n            manager.needRendering = true;\r\n\r\n            var mouseDown = function (event) {\r\n\r\n                var manager = self.manager;\r\n                    manager.needRendering = true;\r\n\r\n                self.createWebButton(event);\r\n\r\n                self.mouseSet(event);\r\n\r\n                self.raycaster.setFromCamera(self.mouse, self.camera);\r\n\r\n                var intersects = self.raycaster.intersectObjects(self.selectableObjects, true);\r\n\r\n                self.intersectObject = intersects[0];\r\n\r\n                if(self.intersectObject){ self.cameraControls.enabled = false; }\r\n\r\n                if(self.mouseDownCallBack) self.mouseDownCallBack(event);\r\n\r\n            };\r\n\r\n            this.platformDetector.addMouseDownFunction(mouseDown);\r\n\r\n        },\r\n\r\n        addMouseMoveEvent: function () {\r\n\r\n            var self = this;\r\n\r\n\r\n\r\n            var onMouseMove = function (event) {\r\n\r\n                var manager = self.manager;\r\n                    manager.needRendering = true;\r\n\r\n                self.createWebButton(event);\r\n\r\n                self.mouseSet(event);\r\n\r\n                self.raycaster.setFromCamera(self.mouse, self.camera);\r\n\r\n                var intersects = self.raycaster.intersectObject(self.projectionObject, true);\r\n\r\n                self.intersectProjection = intersects[0];\r\n\r\n                if(self.mouseMoveCallBack) self.mouseMoveCallBack(event);\r\n\r\n            };\r\n\r\n            this.platformDetector.addMouseMoveFunction(onMouseMove);\r\n\r\n        },\r\n\r\n        addMouseUpEvent: function () {\r\n\r\n            var self = this;\r\n\r\n            var onMouseUp = function (event) {\r\n\r\n                var manager = self.manager;\r\n                    manager.needRendering = false;\r\n\r\n                self.createWebButton(event);\r\n\r\n                if(self.mouseUpCallBack) self.mouseUpCallBack(event);\r\n\r\n                self.intersectObject = null;\r\n\r\n                //self.cameraControls.enabled = true;\r\n\r\n            };\r\n\r\n            this.platformDetector.addMouseUpFunction(onMouseUp);\r\n\r\n        },\r\n\r\n        mouseSet: function(event){\r\n\r\n            var canvas = this.canvas;\r\n\r\n            this.mouse.set(( event.layerX / canvas.width) * 2 - 1, -( event.layerY / canvas.height ) * 2 + 1);\r\n\r\n        },\r\n\r\n        createWebButton: function(event){\r\n\r\n            if(event.webButton === undefined)  {\r\n\r\n                event.webButton = event.button || 0;\r\n\r\n            }\r\n\r\n        },\r\n\r\n        getPlaceInfoFromMesh : function(mesh) {\r\n\r\n            if(!mesh) return;\r\n\r\n            var intersectObject = mesh;\r\n\r\n            var map = this.positionMap;\r\n\r\n            var diff = 100;\r\n\r\n            var info = {\r\n                position: null,\r\n                index: null\r\n            };\r\n\r\n            var from = 0;\r\n            var to = 27;\r\n\r\n            for (var i = from; i <= to; i++) {\r\n\r\n                var point = map[i];\r\n\r\n                if(!point) break;\r\n\r\n                point.forEach(function (_position) {\r\n\r\n                    var selX = intersectObject.position.x;\r\n                    var selZ = intersectObject.position.z;\r\n                    var x = _position.x;\r\n                    var z = _position.z;\r\n\r\n                    var xDiff = x - selX;\r\n                    var zDiff = z - selZ;\r\n\r\n                    var _diff = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(zDiff, 2));\r\n\r\n                    if (_diff < diff) {\r\n\r\n                        diff = _diff;\r\n                        info.index = i;\r\n                        info.position = _position;\r\n\r\n                    }\r\n\r\n                });\r\n\r\n            }\r\n\r\n            return info;\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.Picker = Picker;\r\n\r\n})();\r\n\r\n","(function () {\r\n\r\n    var DoubleCubePicker = function (manager, positionMap) {\r\n\r\n        this.manager = manager;\r\n\r\n        this.positionMap = positionMap;\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    DoubleCubePicker.prototype = new Backgammon3DBoard.Picker();\r\n\r\n    DoubleCubePicker.prototype.constructor = DoubleCubePicker;\r\n\r\n    DoubleCubePicker.prototype.init = function (manager) {\r\n\r\n\r\n        this.scene = manager.scene;\r\n\r\n        this.cube = manager.scene.getObjectByName('double_cube');\r\n\r\n        this.initParent(this.manager);\r\n\r\n        this.initProperties();\r\n\r\n        this.initMovementManager();\r\n\r\n    };\r\n\r\n    DoubleCubePicker.prototype.initMovementManager = function () {\r\n\r\n        this.movementManager = new Backgammon3DBoard.MovementManager();\r\n\r\n    };\r\n\r\n    DoubleCubePicker.prototype.initProperties = function () {\r\n\r\n        var scene = this.scene;\r\n\r\n        this.selectableObjects = [ scene.getObjectByName('double_cube') ];\r\n\r\n    };\r\n\r\n    DoubleCubePicker.prototype.mouseMoveCallBack = function () {\r\n\r\n        var self = this;\r\n\r\n        var selectedCube = self.selectedCube;\r\n\r\n        var intersect = self.intersectProjection;\r\n\r\n        var cameraControls = this.manager.cameraControls;\r\n\r\n        if (!selectedCube || !intersect) return;\r\n\r\n        selectedCube.object.position.x = intersect.point.x;\r\n        selectedCube.object.position.y = 0.5;\r\n        selectedCube.object.position.z = intersect.point.z;\r\n\r\n        cameraControls.enabled = false;\r\n    };\r\n\r\n    DoubleCubePicker.prototype.mouseDownCallBack = function () {\r\n\r\n        var self = this;\r\n\r\n        var intersectObject = self.intersectObject;\r\n\r\n        if (intersectObject) {\r\n\r\n            if(intersectObject.object.readOnly) return;\r\n\r\n            this.selectedCube = intersectObject;\r\n\r\n        }\r\n\r\n    };\r\n\r\n    DoubleCubePicker.prototype.mouseUpCallBack = function () {\r\n\r\n        if(!this.selectedCube ) return;\r\n\r\n        var placeInfo = this.getPlaceInfoFromMesh(this.selectedCube.object);\r\n\r\n        this.doubleCubeMoved(placeInfo.index);\r\n\r\n        this.playSound();\r\n\r\n        this.selectedCube = null;\r\n\r\n    };\r\n\r\n    DoubleCubePicker.prototype.doubleCubeMoved = function (to) {\r\n\r\n        // CALLBACK Function Need to override\r\n\r\n        this.move({to: to}, true);\r\n\r\n    };\r\n\r\n    DoubleCubePicker.prototype.move = function (moveObject, isAnimated) {\r\n\r\n        if(!moveObject) return;\r\n\r\n        if(!(moveObject instanceof Object)) moveObject = {to: moveObject};\r\n\r\n        var indexTo = moveObject.to;\r\n\r\n        var positionMap = this.positionMap;\r\n\r\n        var cube = this.cube;\r\n\r\n        var positionTo = positionMap[indexTo] && positionMap[indexTo][0];\r\n\r\n        if(!positionTo) return;\r\n\r\n        cube.mapIndex = indexTo;\r\n\r\n        this.movementManager.animateDoubleCubeMove(cube, positionTo, isAnimated);\r\n\r\n\r\n    };\r\n\r\n    DoubleCubePicker.prototype.playSound = function () {\r\n\r\n        //CALL Back function needs to be overridden\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.DoubleCubePicker = DoubleCubePicker;\r\n\r\n})();\r\n","(function () {\r\n\r\n    var CheckerPicker = function (manager, positionMap) {\r\n\r\n        this.manager = manager;\r\n\r\n        this.positionMap = positionMap;\r\n\r\n        this.mouseMoveStarted = false;\r\n\r\n        this.isMouseDown = false;\r\n\r\n        var scene = this.manager.scene;\r\n\r\n        var camera = this.manager.camera;\r\n\r\n        var platformDetector = this.manager.platformDetector;\r\n\r\n        this.init(scene, camera, platformDetector, positionMap);\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype = Object.create( Backgammon3DBoard.Picker.prototype );\r\n\r\n    CheckerPicker.prototype.constructor = CheckerPicker;\r\n\r\n\r\n    CheckerPicker.prototype.init = function (scene, camera, platformDetector) {\r\n\r\n        this.initParent(this.manager);\r\n\r\n        this.initProperties();\r\n\r\n        this.initMovementManager();\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.initProperties = function () {\r\n\r\n        var scene = this.scene;\r\n\r\n        this.selectableObjects = scene.getObjectByName('Points').children;\r\n\r\n        this.lastMouseCoords = new THREE.Vector2();\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.initMovementManager = function () {\r\n\r\n        this.movementManager = new Backgammon3DBoard.MovementManager();\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.mouseMoveCallBack = function (event) {\r\n\r\n        this.mouseMoveStarted = this.mouseMoveStarted ? this.mouseMoveStarted : !this.mouseMoveStarted;\r\n\r\n        var condition = this.isMouseInsideCircle();\r\n\r\n        if(condition && !this.isCheckerMoveStarted) return;\r\n\r\n        if(!this.selectedChecker) return;\r\n\r\n        if(event.webButton !== 0 || event.buttons > 1) return;\r\n\r\n        var self = this;\r\n\r\n        var selectedChecker = self.selectedChecker;\r\n\r\n        var intersect = self.intersectProjection;\r\n\r\n        if (!intersect) return;\r\n\r\n        self.selectedChecker.object.mouseMove = true;\r\n\r\n        selectedChecker.object.position.x = intersect.point.x;\r\n        selectedChecker.object.position.y = 0.5;\r\n        selectedChecker.object.position.z = intersect.point.z;\r\n\r\n        this.mouseMoveStarted && !this.isCheckerMoveStarted && this.mouseMoveStart();\r\n\r\n        this.isCheckerMoveStarted = true;\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.mouseMoveStart = function () {\r\n\r\n        var selectedChecker = this.selectedChecker;\r\n\r\n        selectedChecker.object.rotation.x = - Math.PI / 2;\r\n\r\n        this.manager.textWriter.updateCheckersCounts();\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.mouseDownCallBack = function (event) {\r\n\r\n        this.lastMouseCoords = this.mouse.clone();\r\n\r\n        var self = this;\r\n\r\n        var scene = this.manager.scene;\r\n\r\n        this.isMouseDown = true;\r\n\r\n        var intersectObject = self.intersectObject;                \r\n\r\n        if (intersectObject) {\r\n\r\n            var index = intersectObject.object.index;\r\n\r\n            var l = self.selectableObjects[index].children.length;\r\n\r\n            var selectedChecker = {object: self.selectableObjects[index].children[l - 1]};\r\n\r\n            if(selectedChecker.object.readOnly) return;\r\n            if(selectedChecker.object.isMoving) return;\r\n\r\n            self.selectedChecker = selectedChecker;\r\n\r\n            self.platformDetector.isMobile && (window.navigator.vibrate = window.navigator.vibrate || function(){});\r\n            self.platformDetector.isMobile && window.navigator.vibrate(10);\r\n\r\n            var indexOf = self.selectableObjects[index].children.indexOf(self.selectedChecker.object);\r\n\r\n            var o = self.selectableObjects[index].children.splice(indexOf, 1)[0];\r\n\r\n            self.selectableObjects[index].children.push(o);\r\n\r\n            self.manager.gameHelper && self.manager.gameHelper.turnLightOnFromMesh(selectedChecker.object);\r\n\r\n        }\r\n\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.allPossibleSteps = function (index) {\r\n\r\n        //need To Override\r\n\r\n        var self = this;\r\n\r\n        setTimeout(function () {\r\n\r\n            self.move({from: index, to: index}, true);\r\n\r\n        },200);\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.maxStep = function (index) {\r\n\r\n        //need To Override\r\n\r\n        var self = this;\r\n\r\n        setTimeout(function () {\r\n\r\n            self.move({from: index, to: index+2}, true);\r\n\r\n        },200);\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.minStep = function (index) {\r\n\r\n        //need To Override\r\n\r\n        var self = this;\r\n\r\n        setTimeout(function () {\r\n\r\n            self.move({from: index, to: index-2}, true);\r\n\r\n        },200);\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.resetEventsParams = function () {\r\n\r\n        this.isMouseDown = false;\r\n\r\n        this.selectedChecker = null;\r\n\r\n        this.mouseMoveStarted = false;\r\n\r\n        this.isCheckerMoveStarted = false;\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.mouseUpCallBack = function (event) {\r\n\r\n        var self = this;\r\n\r\n        var selectedChecker = self.selectedChecker;\r\n\r\n        self.manager.gameHelper && self.manager.gameHelper.turnOffAllLights();\r\n\r\n        if (!selectedChecker) return;\r\n\r\n        var placeInfo = self.getPlaceInfoFromMesh(selectedChecker.object);\r\n\r\n        var indexTo = placeInfo.index;\r\n\r\n        var indexFrom = selectedChecker.object.index;\r\n\r\n        var moveObject = {from: indexFrom, to: indexTo};\r\n\r\n        var diceManager = this.manager.diceManager;\r\n    \r\n\t\tif(event.webButton === 1){\r\n\r\n\t\t\tself.resetEventsParams();\r\n\r\n\t\t\tself.allPossibleSteps(indexFrom);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(event.webButton === 2){\r\n\r\n\t\t\tself.resetEventsParams();\r\n\r\n\t\t\tself.minStep(indexFrom);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar condition = self.isMouseInsideCircle();\r\n\t\t\r\n\t\tif( condition && !self.isCheckerMoveStarted ){\r\n\r\n\t\t\tself.resetEventsParams();\r\n\r\n\t\t\tself.maxStep(indexFrom);\r\n\r\n\t\t\tthis.manager.textWriter.updateCheckersCounts();\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}       \r\n\r\n        self.resetEventsParams();\r\n\r\n        self.moved(moveObject.from, moveObject.to);\r\n        self.playSound();\r\n\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.isMouseInsideCircle = function () {\r\n\r\n        var r = 0.02;\r\n        var x1 = this.mouse.x;\r\n        var x0 = this.lastMouseCoords.x;\r\n        var y1 = this.mouse.y;\r\n        var y0 = this.lastMouseCoords.y;\r\n        return Math.sqrt(Math.pow((x1-x0),2) + Math.pow((y1-y0),2)) < r;\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.moveCollection = function(moveCollection, isAnimated){\r\n\r\n        while(moveCollection.length) {\r\n\r\n            var moveArray = moveCollection.splice(0,2);\r\n\r\n            var moveObject = {from: moveArray[0], to: moveArray[1]};\r\n\r\n            this.move(moveObject, isAnimated);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.move = function(moveObject, isAnimated) {\r\n\r\n        var indexFrom = moveObject.from;\r\n        var indexTo   = moveObject.to;\r\n\r\n        var isSame = indexFrom == indexTo;\r\n\r\n        var checker = this.selectedChecker && this.selectedChecker.object || this.getCheckerFromIndex(indexFrom);\r\n\r\n        this.resetEventsParams();\r\n\r\n        if (!checker) return;\r\n\r\n        var positionTo = this.getPositionFromIndex(indexTo, isSame);\r\n\r\n        if(!positionTo) return;\r\n\r\n        this.replaceChecker(indexFrom, indexTo);\r\n\r\n        this.animateMove(checker, positionTo, indexTo, isAnimated);\r\n\r\n        var textWriter = this.manager.textWriter;\r\n\r\n        textWriter.updateCheckersCounts();\r\n\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.moved = function(f,t){\r\n\r\n        //this function is a callback\r\n\r\n        this.moveCollection([f, t], true);\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.replaceChecker = function(from, to) {\r\n\r\n        var pointFrom = this.selectableObjects[from];\r\n        var pointFromCheckers = pointFrom.children;\r\n\r\n        var pointTo = this.selectableObjects[to];\r\n        var pointToCheckers = pointTo.children;\r\n\r\n        var checker = this.getCheckerFromIndex(from);\r\n            checker.index = to;\r\n\r\n        var checkerIndex = pointFromCheckers.indexOf(checker);\r\n\r\n        pointFromCheckers.splice(checkerIndex, 1);\r\n        pointToCheckers.push(checker);\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.animateMove = function(checker, toPosition, index, isAnimated) {\r\n\r\n        this.movementManager.animateCheckerMove.apply(this, arguments);\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.getCheckerFromIndex = function(index) {\r\n\r\n        var checkers = this.selectableObjects[index].children;\r\n\r\n        function last(arr) {\r\n\r\n            return arr[arr.length - 1];\r\n\r\n        }\r\n\r\n        return last(checkers);\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.getPositionFromIndex = function(index, isSame) {\r\n\r\n        var map = this.positionMap;\r\n\r\n        var checkers = this.selectableObjects[index] && this.selectableObjects[index].children;\r\n\r\n        if(!checkers) return;\r\n\r\n        var position = isSame\r\n                    ? map[index][checkers.length - 1]\r\n                    : map[index][checkers.length];\r\n\r\n        return position;\r\n\r\n    };\r\n\r\n    CheckerPicker.prototype.playSound = function() {\r\n\r\n        //var audio = new Audio( this.modelsPath + '/newScene/2.mp3');\r\n\r\n        //audio.stop();\r\n        //audio.play();\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.CheckerPicker = CheckerPicker;\r\n\r\n})();\r\n","(function () {\r\n\r\n    var TextWriter = function (checkerManager) {\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    TextWriter.prototype.initProperties = function () {\r\n\r\n        this.manager = null;\r\n\r\n        this.sprite  = null;\r\n\r\n        this.numbers = [];\r\n\r\n    };\r\n\r\n    TextWriter.prototype.init = function (checkerManager) {\r\n\r\n        this.initProperties();\r\n\r\n        this.manager = checkerManager;\r\n\r\n        this.initPositionMap();\r\n\r\n        this.initPoints();\r\n\r\n        this.initObjects();\r\n\r\n        this.addToScene();\r\n\r\n    };\r\n\r\n    TextWriter.prototype.initPositionMap = function () {\r\n\r\n        var pips1 = this.manager.checkerManager.positionMap[0][0].clone();\r\n        var pips2 = this.manager.checkerManager.positionMap[25][0].clone();\r\n\r\n        pips1.z = pips1.z > 0 ? pips1.z + 0.6 : pips1 - 0.6;\r\n        pips2.z = pips2.z < 0 ? pips2.z - 0.6 : pips2 + 0.6;\r\n\r\n        this.pipsMap = {\r\n            pips1: pips1,\r\n            pips2: pips2\r\n        };\r\n\r\n        this.positionMap = this.manager.checkerManager.positionMap;\r\n\r\n    };\r\n\r\n    TextWriter.prototype.initObjects = function () {\r\n\r\n        var material = new THREE.MeshBasicMaterial({color: 0x717686});\r\n\r\n        var geometry1 = this.getGeometryFromText(\" 1 \");\r\n        var geometry2 = this.getGeometryFromText(\" 2 \");\r\n\r\n        var mesh1 = new THREE.Mesh(geometry1, material);\r\n        mesh1.name = 'pips1';\r\n        mesh1.scale.set(0.12, 0.12, 0.012);\r\n        mesh1.rotateX(- Math.PI / 4);\r\n        mesh1.castShadow = true;\r\n        mesh1.receiveShadow = true;\r\n\r\n\r\n        var mesh2 = mesh1.clone();\r\n            mesh2.geometry = geometry2;\r\n            mesh2.name = 'pips2';\r\n            mesh2.position.copy(this.pipsMap.pips2);\r\n\r\n\r\n        this.objects = [ mesh1, mesh2 ];\r\n\r\n        this.updatePositions();\r\n\r\n        this.hidePips();\r\n\r\n    };\r\n\r\n    TextWriter.prototype.hidePips = function(){\r\n\r\n        this.setPipsVisibiliyState(false);\r\n\r\n    };\r\n    TextWriter.prototype.showPips = function(){\r\n\r\n        this.setPipsVisibiliyState(true);\r\n\r\n    };\r\n    TextWriter.prototype.setPipsVisibiliyState = function(state){\r\n\r\n        var  pips1 = this.getPips1();\r\n        var  pips2 = this.getPips2();\r\n\r\n            pips1.visible = state;\r\n            pips2.visible = state;\r\n\r\n\r\n    };\r\n\r\n    TextWriter.prototype.updatePositions = function (isAnimated) {\r\n\r\n        /* TODO Need normal code here */\r\n\r\n        var movementManager = this.manager.movementManager;\r\n\r\n        var boardDegreeState   = movementManager.boardDegreeState;\r\n        var boardRotationState = movementManager.boardRotationState;\r\n\r\n        this.initPositionMap();\r\n\r\n        var pips1 = this.getPips1();\r\n        var pips2 = this.getPips2();\r\n\r\n        pips1.rotation.x = -Math.PI / 3;\r\n        pips2.rotation.x = -Math.PI / 3;\r\n\r\n        pips1.rotation.y = 0;\r\n        pips2.rotation.y = 0;\r\n\r\n        if(boardDegreeState) {\r\n\r\n            pips1.rotation.x = -Math.PI / 3;\r\n            pips2.rotation.x = -Math.PI / 3;\r\n\r\n        } else {\r\n\r\n            pips1.rotation.x = -Math.PI / 2;\r\n            pips2.rotation.x = -Math.PI / 2;\r\n\r\n        }\r\n\r\n        if(boardRotationState) {\r\n\r\n            pips1.rotation.y = Math.PI;\r\n            pips2.rotation.y = Math.PI;\r\n\r\n        } else {\r\n\r\n            pips1.rotation.y = 0 ;\r\n            pips2.rotation.y = 0 ;\r\n\r\n        }\r\n\r\n        if(boardDegreeState && boardRotationState) {\r\n\r\n            pips1.rotation.x = Math.PI / 3;\r\n            pips2.rotation.x = Math.PI / 3;\r\n\r\n            pips1.rotation.y = Math.PI;\r\n            pips2.rotation.y = Math.PI;\r\n\r\n        }\r\n\r\n        if(!boardDegreeState && boardRotationState){\r\n\r\n            pips1.rotation.x = Math.PI / 2;\r\n            pips2.rotation.x = Math.PI / 2;\r\n\r\n        }\r\n\r\n        pips1.position.copy(this.pipsMap.pips1);\r\n        pips2.position.copy(this.pipsMap.pips2);\r\n\r\n    };\r\n\r\n    TextWriter.prototype.addToScene = function () {\r\n\r\n        var scene = this.manager.scene;\r\n\r\n        scene.add(this.objects[0]);\r\n        scene.add(this.objects[1]);\r\n\r\n    };\r\n\r\n    TextWriter.prototype.getMeshFromGeometry = function (geometry, type, small) {\r\n\r\n        var isColorSwitched = this.manager.checkerManager.isColorSwitched;\r\n\r\n        var colorMap = [0xDFCAB0, 0x000000];\r\n\r\n        var blackMaterial = new THREE.MeshBasicMaterial({color: colorMap[isColorSwitched ? 0 : 1]});\r\n        var whiteMaterial = new THREE.MeshBasicMaterial({color: colorMap[isColorSwitched ? 1 : 0]});\r\n\r\n        var matMap = {\r\n            '0': blackMaterial,\r\n            '1': whiteMaterial\r\n        };\r\n\r\n        var material = type ? matMap[type] : blackMaterial;\r\n\r\n        var mesh = new THREE.Mesh(geometry, material);\r\n        small && mesh.scale.set(0.15, 0.15, 0.01) || mesh.scale.set(0.16, 0.16, 0.01) ;\r\n        mesh.rotateX(- Math.PI / 2);\r\n\r\n        return mesh;\r\n\r\n    };\r\n\r\n    TextWriter.prototype.getGeometryFromText = function (text) {\r\n\r\n        var geometry =  new THREE.TextGeometry( text, {\r\n            size: 1,\r\n            height: 1,\r\n            curveSegments: 3,\r\n            font: \"helvetiker\"\r\n        });\r\n\r\n        geometry.center();\r\n\r\n        return geometry;\r\n\r\n    };\r\n\r\n    TextWriter.prototype.updateCheckersCounts = function () {\r\n\r\n        var self = this;\r\n\r\n        var checkersPositionMap = this.manager.checkerManager.positionMap;\r\n\r\n        var selectableObjects = this.manager.checkerManager.checkerPicker.selectableObjects;\r\n\r\n        var points = this.points;\r\n\r\n        var selectedChecker = this.manager.checkerManager.checkerPicker.selectedChecker;\r\n\r\n        var index = selectedChecker && selectedChecker.object.index;\r\n\r\n        var diff = index ? 1 : 0;\r\n\r\n        var point;\r\n\r\n        checkersPositionMap.forEach(function (pointMap, i) {\r\n\r\n            var pointChildrenCount = selectableObjects[i].children.length;\r\n\r\n            var checkersCount = i == index ? pointChildrenCount - diff : pointChildrenCount;\r\n\r\n            var number;\r\n\r\n            if(i == 26 || i == 27){\r\n\r\n                number = checkersCount > 1 ? checkersCount : null;\r\n\r\n            } else {\r\n\r\n                number = checkersCount > 5 ? checkersCount : null;\r\n\r\n            }\r\n\r\n            if(i == 0 || i == 25) return;\r\n\r\n            if(number !== null) {\r\n\r\n                var small = (number + \"\").length > 1;\r\n\r\n                var geometry = self.getGeometryFromText(number);\r\n\r\n                var checkerType = selectableObjects[i].children[0].checkerType;\r\n\r\n                var mesh = self.getMeshFromGeometry(geometry, checkerType, small);\r\n\r\n                mesh.rotation.z = self.manager.movementManager.boardRotationState ? -Math.PI : 0;\r\n\r\n                var posVector = pointMap[6].clone();\r\n                posVector.y += 0.15;\r\n\r\n                point = points.children[i];\r\n\r\n                point.children = [];\r\n                point.children.length = 0;\r\n\r\n                mesh.position.copy(posVector);\r\n\r\n                mesh.index = i;\r\n\r\n                point.add(mesh);\r\n\r\n            }\r\n            else{\r\n\r\n                point = points.children[i];\r\n\r\n                point.children = [];\r\n                point.children.length = 0;\r\n\r\n            }\r\n\r\n        });\r\n\r\n    };\r\n\r\n    TextWriter.prototype.initPoints = function () {\r\n\r\n        this.points = new THREE.Object3D();\r\n\r\n        var points = this.points;\r\n\r\n        points.name = 'Points';\r\n\r\n        var map = this.positionMap;\r\n\r\n        var scene = this.manager.scene;\r\n\r\n        for (var index in map) {\r\n\r\n            var point = map[index];\r\n\r\n            var pointTHREE = new THREE.Object3D();\r\n            pointTHREE.name = 'point';\r\n            pointTHREE.index = index;\r\n\r\n            points.add(pointTHREE);\r\n\r\n        }\r\n\r\n        scene.add(points);\r\n\r\n    };\r\n\r\n    TextWriter.prototype.write = function (place, text) {\r\n\r\n        var scene = this.manager.scene;\r\n\r\n        var placeName = place;\r\n\r\n        if(!isNaN(+place)){\r\n\r\n            placeName = place ? 'pips1' : 'pips2';\r\n\r\n        }\r\n\r\n\r\n        var mesh = scene.getObjectByName(placeName);\r\n        mesh.geometry = this.getGeometryFromText(text);\r\n\r\n\r\n    };\r\n\r\n    TextWriter.prototype.getPips1 = function () {\r\n\r\n        return this.getPips(1);\r\n\r\n    };\r\n\r\n    TextWriter.prototype.getPips2 = function () {\r\n\r\n        return this.getPips(2);\r\n\r\n    };\r\n\r\n    TextWriter.prototype.getPips = function (num) {\r\n\r\n        return this.objects[num - 1];\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.TextWriter = TextWriter;\r\n\r\n\r\n})();\r\n","(function () {\r\n\r\n    var GameHelper = function (manager) {\r\n\r\n        this.demo    = false;\r\n\r\n        this.manager = manager;\r\n\r\n        this.init(manager);\r\n\r\n    };\r\n\r\n    GameHelper.prototype.init = function (manager) {\r\n\r\n        this.scene       = manager.scene;\r\n        this.positionMap = manager.checkerManager.positionMap;\r\n\r\n        this.initProperties();\r\n\r\n    };\r\n\r\n    GameHelper.prototype.initProperties = function () {\r\n\r\n        this.initPoint();\r\n        this.createPoints();\r\n\r\n    };\r\n\r\n    GameHelper.prototype.initPoint = function () {\r\n\r\n        var sphere = new THREE.SphereGeometry( 0.05, 10, 10 );\r\n        var lightColor = 0x00ff00;\r\n        var light1 = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: lightColor } ) ) ;\r\n\r\n\r\n        this.point = light1;\r\n\r\n    };\r\n\r\n    GameHelper.prototype.createPoints = function () {\r\n\r\n        if(this.points) this.scene.remove(this.points);\r\n\r\n        var points1       = new THREE.Object3D();\r\n        var points2       = new THREE.Object3D();\r\n\r\n        var basePoint    = this.point;\r\n\r\n        var positionMap = this.positionMap;\r\n\r\n        var scene       = this.scene;\r\n\r\n        var blackMaterial = new THREE.MeshBasicMaterial({color: 0x000000});\r\n            blackMaterial.transparent = true;\r\n            blackMaterial.opacity = 0.6;\r\n\r\n        for(var  i = 0 ; i <= 25; i++) {\r\n\r\n            var firstPositionInMap = positionMap[i][0].clone();\r\n            var z = firstPositionInMap.z;\r\n            firstPositionInMap.z = z > 0 ? z + 0.35 : z - 0.35;\r\n            firstPositionInMap.y = 0.27;\r\n\r\n            var currentPoint = basePoint.clone();\r\n                currentPoint.position.copy(firstPositionInMap);\r\n                currentPoint.visible = false;\r\n\r\n            var currentPoint2 = basePoint.clone();\r\n                currentPoint2.material = blackMaterial.clone();\r\n                currentPoint2.position.copy(firstPositionInMap);\r\n                currentPoint2.visible = false;\r\n                currentPoint2.scale.set(0.99, 0.99, 0.99);\r\n\r\n            points1.add(currentPoint);\r\n            points2.add(currentPoint2);\r\n\r\n        }\r\n\r\n        scene.add(points1);\r\n        scene.add(points2);\r\n\r\n        this.points = points1;\r\n        this.points2 = points2;\r\n\r\n    };\r\n\r\n    GameHelper.prototype.turnLightOnForIndex = function(index){\r\n\r\n        this.changeLightState(index, true);\r\n\r\n    };\r\n\r\n    GameHelper.prototype.turnLightOffForIndex = function(index){\r\n\r\n        this.changeLightState(index, false);\r\n\r\n    };\r\n\r\n    GameHelper.prototype.changeLightState = function(index, state){\r\n\r\n        if(!this.manager.platformDetector.isMobile) return;\r\n\r\n        var points = this.points.children;\r\n        var point  = points[index];\r\n        point && (point.visible = state);\r\n\r\n    };\r\n\r\n    GameHelper.prototype.turnLightOnFromMesh = function (mesh) {\r\n\r\n        if(!this.demo) return;\r\n        if(!this.manager.platformDetector.isMobile) return;\r\n\r\n        var manager         = this.manager;\r\n\r\n        var diceManager     = manager.diceManager;\r\n        var checkerPicker   = manager.checkerManager.checkerPicker;\r\n\r\n        var points          = this.points.children;\r\n\r\n        var placeInfo       = checkerPicker.getPlaceInfoFromMesh(mesh);\r\n        var placeIndex      = placeInfo.index;\r\n        var lastRoll        = diceManager.lastRoll || [];\r\n\r\n        var diceIndex1      = lastRoll[0];\r\n        var diceIndex2      = lastRoll[1];\r\n        var finalIndex1      = placeIndex + diceIndex1;\r\n        var finalIndex2      = placeIndex + diceIndex2;\r\n\r\n        var point1          = points[finalIndex1];\r\n        var point2          = points[finalIndex2];\r\n\r\n        this.turnOffAllLights();\r\n\r\n        point1 && (point1.visible = true);\r\n        point2 && (point2.visible = true);\r\n\r\n    };\r\n\r\n    GameHelper.prototype.turnOffAllLights = function () {\r\n\r\n        this.turnLightsOn(false);\r\n\r\n    };\r\n\r\n    GameHelper.prototype.turnLightsOn = function (state) {\r\n\r\n        var points = this.points.children;\r\n\r\n        points.forEach(function (point) {\r\n\r\n            point.visible = state;\r\n\r\n        })\r\n\r\n    };\r\n\r\n    GameHelper.prototype.turnOnOff = function () {\r\n\r\n        var points = this.points;\r\n        var points2 = this.points;\r\n\r\n        var rnd = Math.round(Math.random() * 25);\r\n\r\n        points.children[rnd].visible = !points.children[rnd].visible;\r\n\r\n    };\r\n\r\n\r\n    Backgammon3DBoard.GameHelper = GameHelper;\r\n\r\n})();\r\n","(function () {\r\n\r\n    var OptimizationManager = function (manager) {\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    OptimizationManager.prototype = {\r\n\r\n        init: function (manager) {\r\n\r\n            this.manager = manager;\r\n\r\n            this.priority = 0;\r\n\r\n            this.initConfig();\r\n\r\n            this.checkersOptimizationDone = false;\r\n            this.textureOptimizationDone  = false;\r\n            this.shadowsOptimizationDone  = false;\r\n\r\n            this.interval = 3000;\r\n\r\n            var stats = this.manager.stats;\r\n\r\n            stats.functions = [{func: this.update, scope: this}];\r\n\r\n            this.initOptimizations();\r\n\r\n\r\n        },\r\n\r\n        initConfig: function () {\r\n\r\n            this.config = {\r\n                FPS_MIN: 30,\r\n                FPS_MAX: 45\r\n            }\r\n\r\n        },\r\n\r\n        initOptimizations: function () {\r\n\r\n            var optimizations = [];\r\n\r\n            var manager = this.manager;\r\n            var isWeb = manager.platformDetector.isWeb;\r\n\r\n            optimizations.push({isOptimized: false, scope: this, func: this.optimizeShadows});\r\n            isWeb && optimizations.push({isOptimized: false, scope: this, func: this.optimizeCheckers});\r\n            optimizations.push({isOptimized: false, scope: this, func: this.optimizeTextures});\r\n\r\n            this.optimizations = optimizations;\r\n\r\n        },\r\n\r\n        optimizeNext: function () {\r\n\r\n            this.manipulateOptimization(false);\r\n\r\n        },\r\n\r\n        manipulateOptimization: function (condition) {\r\n\r\n            var optimizations = this.optimizations;\r\n\r\n            for(var i in optimizations){\r\n\r\n                var optimization = optimizations[i];\r\n\r\n                if(optimization.isOptimized == condition) {\r\n\r\n                    var func = optimization.func;\r\n\r\n                    var scope = optimization.scope;\r\n\r\n                    func.call(scope, condition);\r\n\r\n                    optimization.isOptimized = !condition;\r\n\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n\r\n        revertOptimizationNext: function () {\r\n\r\n            this.manipulateOptimization(true);\r\n        },\r\n\r\n        update: function () {\r\n\r\n            var config = this.config;\r\n\r\n            var stats = this.manager.stats;\r\n\r\n            var fps = stats.fps;\r\n\r\n            //document.querySelector('#fps').innerHTML = fps;\r\n\r\n            var scene   = this.manager.scene;\r\n\r\n            if (! scene) {\r\n                return;\r\n            }\r\n\r\n            if(config.FPS_MIN > fps ) {\r\n\r\n                this.optimizeNext();\r\n\r\n            } else if (fps > config.FPS_MAX ){\r\n\r\n                this.revertOptimizationNext();\r\n\r\n            }\r\n\r\n        },\r\n\r\n        optimizeShadows: function (condition) {\r\n\r\n            var manager = this.manager;\r\n            var stats   = manager.stats;\r\n            var scene   = manager.scene;\r\n\r\n            if(!stats) return;\r\n\r\n            var dLight2 = scene.getObjectByName(\"dLight2\");\r\n\r\n            var fps = stats.fps;\r\n\r\n            var config = this.config;\r\n\r\n            if(!condition) {\r\n\r\n                dLight2.castShadow = !(dLight2.shadowDarkness == 0);\r\n                dLight2.shadowDarkness = 0;\r\n\r\n            } else {\r\n\r\n                dLight2.castShadow = true;\r\n                dLight2.shadowDarkness = 0.3;\r\n\r\n            }\r\n\r\n        },\r\n\r\n        optimizeCheckers: function (condition) {\r\n\r\n\r\n            var self                    = this;\r\n            var manager                 = this.manager;\r\n            var stats                   = manager.stats;\r\n            var fps                     = +stats.fps;\r\n            var config                  = manager.config;\r\n            var checkerName             = config.checker.name;\r\n            var checkerObjectPathLow    = config.checker.objectPathLow;\r\n            var loader                  = new THREE.ObjectLoader();\r\n            var scene                   = manager.scene;\r\n            var checkerNameLow          = config.checker.nameLow;\r\n            var points                  = manager.checkerManager.points;\r\n            this.checkerHighGeometry    = scene.getObjectByName(checkerName).geometry;\r\n\r\n            //if(this.checkerLoadginStarted) return;\r\n\r\n\r\n            !self.checkerGeometryLow && loader.load(checkerObjectPathLow, function (checkerScene) {\r\n\r\n                self.checkerLoadginStarted = true;\r\n\r\n                var checkerMesh = checkerScene.getObjectByName(checkerNameLow);\r\n\r\n                var geometryLow = checkerMesh.geometry;\r\n                geometryLow.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\r\n\r\n                self.checkerGeometryLow = geometryLow;\r\n\r\n                doAction();\r\n\r\n            });\r\n\r\n            self.checkerGeometryLow && doAction(self.checkerGeometryLow);\r\n\r\n            function doAction(){\r\n\r\n                if(!condition){\r\n\r\n                    self.checkerGeometry = self.checkerGeometryLow;\r\n\r\n                } else {\r\n\r\n                    self.checkerGeometry = self.manager.checkerManager.checkerGeometryHigh;\r\n\r\n                }\r\n\r\n                points.children.forEach(function (point, i) {\r\n\r\n                    point.children.forEach(function (checker, j) {\r\n\r\n                        checker.geometry = self.checkerGeometry;\r\n\r\n                    });\r\n\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n        optimizeTextures: function (condition) {\r\n\r\n\r\n\r\n            if(this.textureOptimizationDone) return;\r\n\r\n            var manager             = this.manager;\r\n            var scene               = manager.scene;\r\n            var config              = manager.config;\r\n            var boardTexturesPath   = config.board.texturesPath;\r\n\r\n            var boardImagePlane = this.boardImagePlane || new THREE.Mesh(\r\n                    new THREE.PlaneGeometry(9.3,6.2),\r\n                    new THREE.MeshPhongMaterial({\r\n                        map: THREE.ImageUtils.loadTexture(boardTexturesPath + 'BI.png'),\r\n                        side: THREE.DoubleSide,\r\n                        color: new THREE.Color(0xffffff)\r\n                    })\r\n                );\r\n\r\n            boardImagePlane.name = 'BI';\r\n            boardImagePlane.rotateX(-Math.PI / 2);\r\n            this.boardImagePlane = boardImagePlane;\r\n\r\n            if(!scene.getObjectByName(boardImagePlane.name)) {\r\n                scene.add(boardImagePlane)\r\n            }\r\n\r\n            var board = scene.getObjectByName('Board_03');\r\n\r\n            var shadowPlane = scene.getObjectByName('ShadowPlane');\r\n            shadowPlane.visible = false;\r\n\r\n            if(!condition){\r\n\r\n                board.visible       = false;\r\n                shadowPlane.visible = false;\r\n                scene.getObjectByName(boardImagePlane.name).visible = true;\r\n\r\n            } else {\r\n\r\n                board.visible       = true;\r\n                shadowPlane.visible = true;\r\n                scene.getObjectByName(boardImagePlane.name).visible = false;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Backgammon3DBoard.OptimizationManager = OptimizationManager;\r\n\r\n})();","(function(){\r\n\r\n    var Manager = function(){\r\n\r\n        (arguments.length > 0) && this.init.apply(this, arguments);\r\n\r\n    };\r\n\r\n    Manager.prototype.initProperties = function(){\r\n\r\n        this.config              = {};\r\n\r\n        this.isInited            = false;\r\n\r\n\r\n        this.scene               = null;\r\n\r\n        this.clock               = null;\r\n\r\n        this.camera              = null;\r\n\r\n        this.loader              = null;\r\n\r\n        this.renderer            = null;\r\n\r\n        this.modelsPath          = null;\r\n\r\n        this.diceManager         = null;\r\n\r\n        this.domContainer        = null;\r\n\r\n        this.objectPicker        = null;\r\n\r\n        this.domContainer        = null;\r\n\r\n        this.cameraControls      = null;\r\n\r\n        this.checkerManager      = null;\r\n\r\n        this.onLoadComplete      = function(){};\r\n\r\n        this.animationFrameID    = null;\r\n\r\n        this.platformDetector    = null;\r\n\r\n        this.eventSource         = null;\r\n\r\n    };\r\n\r\n    Manager.prototype.init = function(domContainer, eventSource, mainPath, initialConfig) {\r\n\r\n\r\n        if (!mainPath) console.error('Manger: Objects path is required!');\r\n\r\n        this.eventSource = eventSource;\r\n\r\n        this.mainPath = mainPath;\r\n\r\n        this.initialConfig = initialConfig || {\r\n\r\n            rotationState: 0,\r\n\r\n            isColorSwitched: false,\r\n\r\n            isMirrored: false,\r\n\r\n            outPlaces: {\r\n\r\n                placeOfOut1: 0,\r\n                placeOfOut2: 25\r\n\r\n            }\r\n\r\n        };\r\n\r\n        this.initConfig(mainPath);\r\n\r\n        this.initStats();       \r\n\r\n        this.modelsPath = this.config || '';\r\n\r\n        this.initDomContainer(domContainer);\r\n\r\n        this.initPlatformDetector();\r\n\r\n        this.initOptimizationManager();\r\n\r\n        this.initRenderer();\r\n\r\n        this.initCamera();\r\n\r\n        this.initLoader();\r\n\r\n    };\r\n\r\n    Manager.prototype.initConfig = function(mainPath){\r\n\r\n        this.config = {\r\n\r\n            mainPath:           mainPath,\r\n\r\n            board: {\r\n                objectPath:     mainPath + 'board/board.json',\r\n                texturesPath:   mainPath + 'board/'\r\n            },\r\n\r\n            plane: {\r\n                objectPath:     mainPath + 'plane/opt-plane-01.json',\r\n                texturesPath:   mainPath + 'plane/',\r\n                name:           'Plane001'\r\n            },\r\n\r\n            checker: {\r\n                objectPath:     mainPath + 'checker/checker-high.json',\r\n                objectPathLow:  mainPath + 'checker/checker.json',\r\n                texturesPath:   mainPath + 'checker/',\r\n                name:           'Checker_High_001',\r\n                nameLow:        'Checker_01.001'\r\n            },\r\n\r\n            dice: {\r\n                objectPath:     mainPath + 'dice/dice.json',\r\n                texturesPath:   mainPath + 'dice/',\r\n                animationsPath: mainPath + 'dice/animations/',\r\n                name:           'Dice_01'\r\n            },\r\n\r\n            double_cube: {\r\n                texturesPath:   mainPath + 'double_cube/',\r\n                name:           'double_cube'\r\n            },\r\n\r\n            renderer : {\r\n                antialias: true,\r\n                alpha:     true,\r\n                clearColor: 0x595d69,\r\n                shadowMap : {\r\n                    enabled: true,\r\n                    soft:    true\r\n                }\r\n            },\r\n\r\n            camera: {\r\n                position: new THREE.Vector3( 0, 13, 6 ),\r\n                zoom : 1.40//1.38\r\n            }\r\n        };\r\n\r\n    };\r\n\r\n\r\n    Manager.prototype.initDomContainer = function(domContainer) {\r\n\r\n        this.domContainer = domContainer  || document.createElement('div');\r\n\r\n    };\r\n\r\n    Manager.prototype.initCamera = function() {\r\n\r\n        var el = this.domContainer;\r\n        var WIDTH = el.clientWidth || el.width;\r\n        var HEIGHT = el.clientHeight || el.height;\r\n\r\n        var config = this.config.camera;\r\n\r\n        this.camera = new THREE.PerspectiveCamera(33, WIDTH / HEIGHT, 1, 10000);\r\n\r\n        this.camera.position.copy(config.position);\r\n\r\n        this.camera.lookAt(new THREE.Vector3(0, 0, 0.3));\r\n\r\n        this.camera.zoom = config.zoom;\r\n\r\n        this.camera.updateProjectionMatrix();\r\n\r\n    };\r\n\r\n\r\n\r\n    Manager.prototype.initScene = function(loadedScene) {\r\n\r\n            if (loadedScene) {\r\n                    this.scene = loadedScene;\r\n            } else {\r\n                    this.scene = new THREE.Scene();\r\n            }\r\n\r\n    };\r\n\r\n    Manager.prototype.initRenderer = function() {\r\n\r\n        this.renderer = this.platformDetector.getRenderer();\r\n\r\n    };\r\n\r\n\r\n\r\n    Manager.prototype.initLoader = function() {\r\n\r\n        var config = this.config;\r\n\r\n        this.loader = new Backgammon3DBoard.BoardLoader(config);\r\n\r\n    };\r\n\r\n    Manager.prototype.initMovementManager = function () {\r\n\r\n        this.movementManager = new Backgammon3DBoard.MovementManager(this);\r\n\r\n    };\r\n\r\n    Manager.prototype.initPlatformDetector = function () {\r\n\r\n        var domContainer = this.domContainer;\r\n        var eventSource  = this.eventSource;\r\n        var config       = this.config;\r\n\r\n        this.platformDetector = new Backgammon3DBoard.PlatformDetector(domContainer, eventSource, config);\r\n\r\n    };\r\n\r\n\r\n    Manager.prototype.fullInit = function(boardScene, animations) {\r\n\r\n        var self = this;\r\n\r\n        this.initScene(boardScene);\r\n\r\n        this.initDiceManager(animations);\r\n\r\n        this.initEvents();\r\n\r\n        this.initLights();\r\n\r\n        this.initCameraControls();\r\n\r\n        this.scene.getObjectByName('Board_03')  && this.beautifyScene();\r\n\r\n        this.initCheckerManager();\r\n\r\n        this.initDoubleCube();\r\n\r\n        this.initMovementManager();\r\n\r\n        this.initTextWriter();\r\n\r\n        this.applyInitialConfig();\r\n\r\n        this.initGameHelper();\r\n\r\n        this.initAPI();\r\n\r\n        //this.initPhysics();\r\n\r\n        this.onLoadComplete();\r\n\r\n        this.isInited = true;\r\n\r\n\r\n    };\r\n\r\n    Manager.prototype.applyInitialConfig = function(){\r\n\r\n        var initialConfig = this.initialConfig;\r\n\r\n        var checkerManager = this.checkerManager;\r\n\r\n        var isMirrored = initialConfig.isMirrored;\r\n\r\n        var rotationState = initialConfig.rotationState;\r\n\r\n        this.setRotationState(rotationState, false);\r\n\r\n        isMirrored && checkerManager.mirrorPositionMap();\r\n\r\n    };\r\n\r\n\r\n    Manager.prototype.initCameraControls = function() {\r\n\r\n        var camera = this.camera;\r\n\r\n        //THREE.OrbitControls = null;\r\n\r\n        this.cameraControls = THREE.OrbitControls ? new THREE.OrbitControls(camera, this.renderer.domElement) : {};\r\n\r\n        this.cameraControls.target = new THREE.Vector3(0, -0.6, 0);\r\n\r\n\r\n     };\r\n\r\n    Manager.prototype.initStats = function(){\r\n\r\n        this.stats = new Stats();\r\n\r\n    };\r\n\r\n    Manager.prototype.initOptimizationManager = function () {\r\n\r\n        this.optimizationManager = new Backgammon3DBoard.OptimizationManager(this);\r\n\r\n    };\r\n\r\n    Manager.prototype.initCheckerManager = function(isMirrored) {\r\n\r\n        var scene = this.scene;\r\n\r\n        var checkerName = this.config.checker.name;\r\n\r\n        var checker = scene.getObjectByName(checkerName);\r\n\r\n        checker.scale.set(0.019, 0.019, 0.021);\r\n\r\n        this.checkerManager = new Backgammon3DBoard.CheckerManager(this, isMirrored);\r\n\r\n        scene.remove(checker);\r\n\r\n    };\r\n\r\n    Manager.prototype.initDiceManager = function(animations) {\r\n\r\n        var diceManagerParams = {mass: 0.3, diceParams: {x: 0.2, y: 0.2, z: 0.2}};\r\n\r\n        var modelsPath = this.modelsPath;\r\n\r\n        this.diceManager = new Backgammon3DBoard.DiceManager(this, diceManagerParams, modelsPath.dice, animations);\r\n\r\n    };\r\n\r\n    Manager.prototype.initTextWriter = function () {\r\n\r\n        this.textWriter = new Backgammon3DBoard.TextWriter(this);\r\n\r\n    };\r\n\r\n    Manager.prototype.initDoubleCube = function () {\r\n\r\n        this.doubleCubeManager = new Backgammon3DBoard.DoubleCubeManager(this);\r\n\r\n    };\r\n\r\n\r\n    Manager.prototype.initEvents = function() {\r\n\r\n        var self = this;\r\n        var domContainer = this.domContainer;\r\n\r\n        var platformDetector = this.platformDetector;\r\n\r\n        if(!domContainer) return;\r\n\r\n\r\n\r\n\r\n        var onresize = function (event) {\r\n\r\n            self.stopRendering = false;\r\n\r\n            var renderer = self.renderer;\r\n\r\n            var WIDTH = self.domContainer.clientWidth   || self.domContainer.width;\r\n            var HEIGHT = self.domContainer.clientHeight || self.domContainer.height;\r\n\r\n            if(self.platformDetector.isMobile) {\r\n                WIDTH = window.innerWidth;\r\n                HEIGHT = window.innerHeight;\r\n            }\r\n\r\n            self.camera.aspect = WIDTH / HEIGHT;\r\n            self.camera.updateProjectionMatrix();\r\n            renderer.setSize(WIDTH, HEIGHT);\r\n\r\n\r\n            if(\r\n                self.platformDetector.isMobile &&\r\n                window.innerWidth < window.innerHeight\r\n            ){\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            if(!self.platformDetector.isMobile) return;\r\n\r\n\r\n            self.camera.position.set(0, 9.364, 3.414);\r\n            self.camera.lookAt(new THREE.Vector3(0,-0.6,0));\r\n\r\n\r\n\r\n        };\r\n\r\n        platformDetector.connectResize(onresize);\r\n\r\n    };\r\n\r\n\r\n    Manager.prototype.load = function() {\r\n\r\n        var self = this;\r\n\r\n        var loader = this.loader;\r\n\r\n        loader.config = this.config;\r\n\r\n        loader.loadAll( function (scene, animations) {\r\n\r\n            self.fullInit(scene, animations);\r\n\r\n        })\r\n    };\r\n\r\n    Manager.prototype.beautifyScene  = function() {\r\n\r\n        var scene = this.scene;\r\n\r\n        var main = scene.getObjectByName('Object001');\r\n            main.receiveShadow = true;\r\n            main.castShadow = true;\r\n\r\n        var board = scene.getObjectByName('Board_03');\r\n            board.receiveShadow = true;\r\n            board.castShadow = true;\r\n\r\n        var boardTexturesPath = this.config.board.texturesPath;\r\n        var planeTexturesPath = this.config.plane.texturesPath;\r\n\r\n        var textureLoader = THREE.ImageUtils;\r\n        var map = textureLoader.loadTexture( boardTexturesPath + 'bg_board_tex_2000px.jpg', function(){});\r\n            map.minFilter = THREE.LinearFilter;\r\n\r\n        var material;\r\n        material = new THREE.MeshPhongMaterial({color: 0xffffff});\r\n        material.map = map;\r\n        material.bumpMap = map;\r\n\r\n        material.bumpScale = 0.003;\r\n        material.shininess = 50;\r\n\r\n        board.material = material;\r\n\r\n        var plane = new THREE.Mesh(new THREE.PlaneGeometry(8.9,5.9), new THREE.MeshBasicMaterial());\r\n            plane.name = 'ProjectionObject';\r\n            plane.rotateX( -Math.PI / 2);\r\n            plane.position.y = 0.5;\r\n            plane.material.transparent = true;\r\n            plane.material.opacity = 0;\r\n\r\n            var shadowPlane = new THREE.Mesh(\r\n                                    new THREE.PlaneGeometry(11.8,11.8),\r\n                                    new THREE.MeshPhongMaterial({\r\n                                                    map: THREE.ImageUtils.loadTexture(planeTexturesPath + 'flor_alpha_01.png'),\r\n                                                    side: THREE.DoubleSide,\r\n                                                    color: new THREE.Color(0xffffff)\r\n                                            })\r\n                                    );\r\n\r\n            shadowPlane.rotateX( - Math.PI / 2);\r\n            shadowPlane.material.shininess      = 150;\r\n            shadowPlane.material.specular       = 0;\r\n            shadowPlane.material.transparent    = true;\r\n            shadowPlane.name                    = 'ShadowPlane';\r\n\r\n        //if(this.platformDetector.isMobile) {\r\n        //\r\n        //    var boardImagePlane = new THREE.Mesh(\r\n        //        new THREE.PlaneGeometry(9.3,6.2),\r\n        //        new THREE.MeshPhongMaterial({\r\n        //            map: THREE.ImageUtils.loadTexture(boardTexturesPath + 'BI.png'),\r\n        //            side: THREE.DoubleSide,\r\n        //            color: new THREE.Color(0xffffff)\r\n        //        })\r\n        //    );\r\n        //\r\n        //    boardImagePlane.name = 'BI';\r\n        //    boardImagePlane.rotateX(-Math.PI / 2);\r\n        //\r\n        //    //var board = scene.getObjectByName(\"BI\");\r\n        //    //    board.visible = false;\r\n        //\r\n        //    scene.traverse(function (child) {\r\n        //\r\n        //        if(child instanceof THREE.Mesh) {\r\n        //\r\n        //            if(child.name == \"BI\") return;\r\n        //\r\n        //            child.visible = false;\r\n        //\r\n        //        }\r\n        //\r\n        //    });\r\n        //    scene.add(boardImagePlane);\r\n        //\r\n        //}\r\n\r\n            scene.add(plane);\r\n            //!this.platformDetector.isMobile &&\r\n            scene.add(shadowPlane);\r\n\r\n\r\n    };\r\n\r\n    Manager.prototype.initLights = function() {\r\n\r\n        var scene = this.scene;\r\n\r\n        var hemisphereLight = new THREE.HemisphereLight(0xffffff, 0xffffff);\r\n            hemisphereLight.position.set(0, 50, 0);\r\n            hemisphereLight.name        = 'hLight';\r\n            hemisphereLight.intensity   = 0.1;\r\n            hemisphereLight.visible     = true;\r\n\r\n\r\n        var light = new THREE.DirectionalLight(0xffffff, 0.1);\r\n            light.position.set(0, 5, 5);\r\n            light.name                  = 'dLight1';\r\n            light.castShadow            = false;\r\n            light.shadowCameraNear      =  3;\r\n            light.shadowCameraFar       =  15;\r\n            light.shadowCameraLeft      = -5;\r\n            light.shadowCameraRight     =  5;\r\n            light.shadowCameraTop       =  5;\r\n            light.shadowCameraBottom    = -5;\r\n            light.shadowDarkness        =  0.3;\r\n            light.shadowBias            =  0;\r\n            light.shadowMapHeight       = light.shadowMapWidth = 1024;\r\n            light.intensity             =  0.6;\r\n            light.visible               = true;\r\n\r\n        scene.add(light);\r\n\r\n        var light2 = new THREE.DirectionalLight(0xffffff, 0.1);\r\n            light2.position.set(5, 5, -5);\r\n            light2.name                 = 'dLight2';\r\n            light2.castShadow           = !this.platformDetector.isMobile;\r\n            light2.shadowCameraNear     =  3;\r\n            light2.shadowCameraFar      =  15;\r\n            light2.shadowCameraLeft     = -5;\r\n            light2.shadowCameraRight    =  5;\r\n            light2.shadowCameraTop      =  5;\r\n            light2.shadowCameraBottom   = -5;\r\n            light2.shadowDarkness       =  0.3;\r\n            light2.shadowBias           =  0;\r\n            light2.shadowMapHeight      = light2.shadowMapWidth = 1024;\r\n            light2.intensity            =  0.6;\r\n            light2.visible              = true;\r\n            light2.position.z = -light.position.z;\r\n            light2.position.x = -light.position.x;\r\n\r\n        scene.add(light2);\r\n\r\n        scene.add(hemisphereLight);\r\n\r\n    };\r\n\r\n    Manager.prototype.initGameHelper = function () {\r\n\r\n        this.gameHelper = Backgammon3DBoard.GameHelper && new Backgammon3DBoard.GameHelper(this);\r\n\r\n    };\r\n\r\n    Manager.prototype.start = function() {\r\n\r\n        var self = this;\r\n\r\n        var then;\r\n\r\n        function animate() {\r\n\r\n            self.stats.begin();\r\n            var now = Date.now();\r\n            var delta = now - then;\r\n\r\n            try{\r\n\r\n                self.animationFrameID = requestAnimationFrame(animate);\r\n                self.animate(delta / 20);\r\n\r\n\r\n            }catch(e){\r\n\r\n                console.error(e);\r\n\r\n            }\r\n\r\n            then = now;\r\n\r\n            self.stats.end();\r\n\r\n        }\r\n\r\n        animate();\r\n\r\n    };\r\n\r\n    Manager.prototype.destroy = function(){\r\n\r\n        if(!this.platformDetector.isWeb) return;\r\n\r\n        this.renderer.clear();\r\n        \r\n        this.animationFrameID && cancelAnimationFrame(\r\n\t\t\tthis.animationFrameID.data && this.animationFrameID.data.handleId || this.animationFrameID\r\n\t\t);\r\n\r\n        this.renderer.domElement.addEventListener('dblclick', null, false);\r\n\r\n        this.platformDetector.removeEvents();\r\n\r\n        this.scene              = null;\r\n        this.camera             = null;\r\n        this.cameraControls     = null;\r\n        this.checkerManager     = null;\r\n        this.diceManager        = null;\r\n\r\n    };\r\n\r\n    Manager.prototype.animate = function(delta){\r\n\r\n        var self = this;\r\n\r\n        if (self.stopRendering) return;\r\n        if (!self.isInited) return;\r\n        //if (!self.needRendering) return;\r\n\r\n        var renderer    = self.renderer;\r\n\r\n        var scene       = self.scene;\r\n\r\n        var camera      = self.camera;\r\n\r\n        var diceManger  = self.diceManager;\r\n\r\n        var physics     = self.physics;\r\n\r\n        var textWriter = self.textWriter;\r\n\r\n        var optimizationManager = self.optimizationManager;\r\n\r\n        renderer.clear();\r\n\r\n        renderer.render(scene, camera);\r\n\r\n        TWEEN.update();\r\n\r\n        diceManger.update(delta);\r\n\r\n\r\n\r\n\r\n        //optimizationManager.update();\r\n\r\n    };\r\n\r\n    //Manager.prototype.optimizeForLowFPS = function () {\r\n    //\r\n    //    var stats = this.stats;\r\n    //\r\n    //    if(!stats) return;\r\n    //\r\n    //    var fps = +stats.fps;\r\n    //    var dLight2 = this.scene.getObjectByName(\"dLight2\");\r\n    //\r\n    //    if(dLight2.shadowDarkness == 0) {\r\n    //        dLight2.castShadow = false;\r\n    //    }else{\r\n    //        dLight2.castShadow = true;\r\n    //    }\r\n    //\r\n    //    if(20 < fps && fps < 30){\r\n    //\r\n    //            dLight2.shadowDarkness = 0;\r\n    //    }\r\n    //    else{\r\n    //            dLight2.shadowDarkness = 0.3;\r\n    //    }\r\n    //\r\n    //};\r\n\r\n    Manager.prototype.setRotationState = function(state, isAnimated){\r\n\r\n        var movementManager = this.movementManager;\r\n\r\n        movementManager.rotateBoard(+state, isAnimated);\r\n\r\n    };\r\n\r\n    Manager.prototype.setPlaceOfOut = function (type, place) {\r\n\r\n        this.checkerManager.setPlaceOfOut(type, place)\r\n\r\n    };\r\n\r\n    Manager.prototype.setDoubleCubeReadOnly = function (state) {\r\n\r\n        this.doubleCubeManager.setReadOnly(state);\r\n\r\n    };\r\n\r\n    Manager.prototype.setDegreeState = function (state, isAnimated) {\r\n\r\n       var movementManager = this.movementManager;\r\n\r\n        movementManager.setBoardDegreeState(+state, isAnimated);\r\n\r\n\r\n    };\r\n\r\n    Manager.prototype.initPhysics = function () {\r\n\r\n        var dice1 = this.diceManager.getDice1();\r\n        var dice2 = this.diceManager.getDice2();\r\n\r\n        var physics = new DAC.PhysicsManager(this);\r\n            //physics.createPhysicsForMesh(dice1.three);\r\n            //physics.createPhysicsForMesh(dice2.three);\r\n\r\n        this.physics = physics;\r\n\r\n    };\r\n\r\n    Manager.prototype.initAPI = function () {\r\n\r\n\r\n        var movementManager     = this.movementManager;\r\n\r\n        var checkerManager      = this.checkerManager;\r\n\r\n        var doubleCubeManager   = this.doubleCubeManager;\r\n\r\n        var diceManager         = this.diceManager;\r\n\r\n        var textWriter          = this.textWriter;\r\n\r\n        var checkerPicker       = checkerManager.checkerPicker;\r\n\r\n        var doubleCubePicker    = doubleCubeManager.doubleCubePicker;\r\n\r\n        var gameHelper          = this.gameHelper;\r\n\r\n        this.api = {\r\n\r\n            /**\r\n             *\r\n             * Call backs\r\n             *\r\n             * */\r\n            set moved(callback) {\r\n\r\n                checkerPicker.moved = callback;\r\n            },\r\n\r\n            set maxStep(callback) {\r\n\r\n                checkerPicker.maxStep = callback;\r\n\r\n            },\r\n\r\n            set minStep(callback) {\r\n\r\n                checkerPicker.minStep = callback;\r\n\r\n            },\r\n\r\n            set allPossibleSteps(callback) {\r\n\r\n                checkerPicker.allPossibleSteps = callback;\r\n\r\n            },\r\n\r\n            set doubleCubeMoved(callback) {\r\n\r\n                doubleCubePicker.doubleCubeMoved = callback;\r\n\r\n            },\r\n\r\n            set playCheckerSound(callback) {\r\n\r\n                checkerPicker.playSound = callback;\r\n\r\n            },\r\n\r\n            set playDiceSound(callback) {\r\n\r\n                diceManager.playSound = callback;\r\n\r\n            },\r\n\r\n            set playDoubleCubeSound(callback) {\r\n\r\n                doubleCubeManager.playSound = callback;\r\n\r\n            },\r\n\r\n\r\n\r\n            /**\r\n             *\r\n             * Board\r\n             *\r\n             * */\r\n            setRotationState: function (state, isAnimated) {\r\n\r\n                state = +state;\r\n                movementManager.rotateBoard.apply(movementManager, arguments);\r\n\r\n            },\r\n\r\n            setDegreeState: function (state, isAnimated) {\r\n\r\n                state = +state;\r\n                movementManager.setBoardDegreeState.apply(movementManager, arguments);\r\n\r\n            },\r\n\r\n\r\n            /**\r\n             *\r\n             * Checkers\r\n             *\r\n             * */\r\n            setPlaceOfOut: function (type, place) {\r\n\r\n                checkerManager.setPlaceOfOut.apply(checkerManager, arguments);\r\n\r\n            },\r\n\r\n            setCheckersInPoint: function (point, collection) {\r\n\r\n                checkerManager.setCheckersInPoint.apply(checkerManager, arguments);\r\n\r\n            },\r\n\r\n            move: function (moveCollection, isAnimated) {\r\n\r\n                checkerPicker.moveCollection.apply(checkerPicker, arguments);\r\n\r\n            },\r\n\r\n            setReadOnly : function (checkerType, isReadOnly) {\r\n\r\n                checkerManager.setReadOnly.apply(checkerManager, arguments);\r\n\r\n            },\r\n\r\n            switchColors: function(state){\r\n\r\n                checkerManager.switchCheckersColors.apply(checkerManager, arguments);\r\n                diceManager.switchDiceColors.apply(diceManager, arguments);\r\n\r\n            },\r\n\r\n            setMirroredState: function(state, isAnimated){\r\n\r\n                checkerManager.mirrorPositionMap.apply(checkerManager, arguments);\r\n\r\n            },\r\n\r\n\r\n            /**\r\n             *\r\n             * Double Cube\r\n             *\r\n             * */\r\n            setDoubleCubeReadOnly: function (state) {\r\n\r\n                doubleCubeManager.setReadOnly.apply(doubleCubeManager, arguments);\r\n            },\r\n\r\n            moveDoubleCubeTo: function(index, isAnimated){\r\n\r\n                doubleCubePicker.move.apply(doubleCubePicker, arguments);\r\n\r\n            },\r\n\r\n            changeDoubleCubeTo : function (place, number, isAnimated) {\r\n\r\n                doubleCubeManager.setDoubleCube.apply(doubleCubeManager, arguments);\r\n\r\n            },\r\n\r\n            isDoubleCubeExist: function(state){\r\n\r\n                doubleCubeManager.isDoubleCubeExist.apply(doubleCubeManager, arguments);\r\n\r\n            },\r\n\r\n\r\n            /**\r\n             *\r\n             * Dices\r\n             *\r\n             * */\r\n            roll : function(num1, num2, rollType, isAnimated) {\r\n\r\n                diceManager.drop.apply(diceManager, arguments);\r\n            },\r\n\r\n            setDiceState: function(dice, state) {\r\n\r\n                diceManager.setDiceState.apply(diceManager, arguments);\r\n\r\n            },\r\n\r\n            /**\r\n             *\r\n             * Pips\r\n             *\r\n             * */\r\n            showPips : function() {\r\n\r\n                textWriter.showPips();\r\n            },\r\n\r\n            hidePips: function() {\r\n\r\n                textWriter.hidePips();\r\n            },\r\n\r\n            writePips: function(pips, text){\r\n\r\n                textWriter.write(pips, text);\r\n\r\n            },\r\n\r\n            setPips: function(pips1, pips2){\r\n\r\n                textWriter.write(0, \"\"+pips1);\r\n                textWriter.write(1, \"\"+pips2);\r\n\r\n            },\r\n\r\n            setPipsVisibility: function(state){\r\n\r\n                textWriter.setPipsVisibiliyState(state);\r\n\r\n            },\r\n\r\n            /**\r\n             *\r\n             * Hints\r\n             *\r\n             * */\r\n            turnAllHintsOff: function () {\r\n\r\n                gameHelper.turnOffAllLights();\r\n\r\n            },\r\n\r\n            setHintForIndex: function (index) {\r\n\r\n                gameHelper.turnLightOnForIndex(index);\r\n\r\n            },\r\n\r\n            removeHintForIndex: function(index){\r\n\r\n                gameHelper.turnLightOffForIndex(index);\r\n\r\n            },\r\n\r\n            setHintsForIndexes: function(index1OrArray, index2){\r\n\r\n                gameHelper.turnOffAllLights();\r\n\r\n                if(index1OrArray[0]){\r\n                    gameHelper.turnLightOnForIndex(index1OrArray[0]);\r\n                    gameHelper.turnLightOnForIndex(index1OrArray[1]);\r\n                }\r\n                else{\r\n\r\n                    gameHelper.turnLightOnForIndex(index1OrArray);\r\n                    gameHelper.turnLightOnForIndex(index2);\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n        };\r\n\r\n    };\r\n\r\n\r\n    Backgammon3DBoard.Manager = Manager;\r\n\r\n})();\r\n","if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\r\n\t\tmodule.exports = {\r\n\t\t\tStats: Stats,\r\n\t\t\tBackgammon3DBoard: Backgammon3DBoard\r\n\t\t};\r\n\r\n}"],"sourceRoot":"/source/"}